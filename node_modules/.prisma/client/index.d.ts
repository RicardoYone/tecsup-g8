
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model partidoPolitico
 * 
 */
export type partidoPolitico = {
  id: number
  nombre: string
  logo: string
}

/**
 * Model Region
 * 
 */
export type Region = {
  id: number
  nombre: string
}

/**
 * Model Votante
 * 
 */
export type Votante = {
  dni: string
  nombre: string
  apellido: string
  regionId: number
}

/**
 * Model Candidato
 * 
 */
export type Candidato = {
  id: number
  nombre: string
  apellido: string
  partidoPoliticoId: number
  regionId: number
}

/**
 * Model Sufragio
 * 
 */
export type Sufragio = {
  id: number
  fecha: Date
  votanteId: string
  candidatoId: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more PartidoPoliticos
 * const partidoPoliticos = await prisma.partidoPolitico.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more PartidoPoliticos
   * const partidoPoliticos = await prisma.partidoPolitico.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.partidoPolitico`: Exposes CRUD operations for the **partidoPolitico** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PartidoPoliticos
    * const partidoPoliticos = await prisma.partidoPolitico.findMany()
    * ```
    */
  get partidoPolitico(): Prisma.partidoPoliticoDelegate<GlobalReject>;

  /**
   * `prisma.region`: Exposes CRUD operations for the **Region** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Regions
    * const regions = await prisma.region.findMany()
    * ```
    */
  get region(): Prisma.RegionDelegate<GlobalReject>;

  /**
   * `prisma.votante`: Exposes CRUD operations for the **Votante** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Votantes
    * const votantes = await prisma.votante.findMany()
    * ```
    */
  get votante(): Prisma.VotanteDelegate<GlobalReject>;

  /**
   * `prisma.candidato`: Exposes CRUD operations for the **Candidato** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Candidatoes
    * const candidatoes = await prisma.candidato.findMany()
    * ```
    */
  get candidato(): Prisma.CandidatoDelegate<GlobalReject>;

  /**
   * `prisma.sufragio`: Exposes CRUD operations for the **Sufragio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sufragios
    * const sufragios = await prisma.sufragio.findMany()
    * ```
    */
  get sufragio(): Prisma.SufragioDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.4.0
   * Query Engine version: f352a33b70356f46311da8b00d83386dd9f145d6
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    partidoPolitico: 'partidoPolitico',
    Region: 'Region',
    Votante: 'Votante',
    Candidato: 'Candidato',
    Sufragio: 'Sufragio'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PartidoPoliticoCountOutputType
   */


  export type PartidoPoliticoCountOutputType = {
    candidatos: number
  }

  export type PartidoPoliticoCountOutputTypeSelect = {
    candidatos?: boolean
  }

  export type PartidoPoliticoCountOutputTypeGetPayload<
    S extends boolean | null | undefined | PartidoPoliticoCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? PartidoPoliticoCountOutputType
    : S extends undefined
    ? never
    : S extends PartidoPoliticoCountOutputTypeArgs
    ?'include' extends U
    ? PartidoPoliticoCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof PartidoPoliticoCountOutputType ? PartidoPoliticoCountOutputType[P] : never
  } 
    : PartidoPoliticoCountOutputType
  : PartidoPoliticoCountOutputType




  // Custom InputTypes

  /**
   * PartidoPoliticoCountOutputType without action
   */
  export type PartidoPoliticoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PartidoPoliticoCountOutputType
     * 
    **/
    select?: PartidoPoliticoCountOutputTypeSelect | null
  }



  /**
   * Count Type RegionCountOutputType
   */


  export type RegionCountOutputType = {
    candidatos: number
    votantes: number
  }

  export type RegionCountOutputTypeSelect = {
    candidatos?: boolean
    votantes?: boolean
  }

  export type RegionCountOutputTypeGetPayload<
    S extends boolean | null | undefined | RegionCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? RegionCountOutputType
    : S extends undefined
    ? never
    : S extends RegionCountOutputTypeArgs
    ?'include' extends U
    ? RegionCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof RegionCountOutputType ? RegionCountOutputType[P] : never
  } 
    : RegionCountOutputType
  : RegionCountOutputType




  // Custom InputTypes

  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RegionCountOutputType
     * 
    **/
    select?: RegionCountOutputTypeSelect | null
  }



  /**
   * Count Type VotanteCountOutputType
   */


  export type VotanteCountOutputType = {
    sufragios: number
  }

  export type VotanteCountOutputTypeSelect = {
    sufragios?: boolean
  }

  export type VotanteCountOutputTypeGetPayload<
    S extends boolean | null | undefined | VotanteCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? VotanteCountOutputType
    : S extends undefined
    ? never
    : S extends VotanteCountOutputTypeArgs
    ?'include' extends U
    ? VotanteCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof VotanteCountOutputType ? VotanteCountOutputType[P] : never
  } 
    : VotanteCountOutputType
  : VotanteCountOutputType




  // Custom InputTypes

  /**
   * VotanteCountOutputType without action
   */
  export type VotanteCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the VotanteCountOutputType
     * 
    **/
    select?: VotanteCountOutputTypeSelect | null
  }



  /**
   * Count Type CandidatoCountOutputType
   */


  export type CandidatoCountOutputType = {
    sufragios: number
  }

  export type CandidatoCountOutputTypeSelect = {
    sufragios?: boolean
  }

  export type CandidatoCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CandidatoCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CandidatoCountOutputType
    : S extends undefined
    ? never
    : S extends CandidatoCountOutputTypeArgs
    ?'include' extends U
    ? CandidatoCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CandidatoCountOutputType ? CandidatoCountOutputType[P] : never
  } 
    : CandidatoCountOutputType
  : CandidatoCountOutputType




  // Custom InputTypes

  /**
   * CandidatoCountOutputType without action
   */
  export type CandidatoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CandidatoCountOutputType
     * 
    **/
    select?: CandidatoCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model partidoPolitico
   */


  export type AggregatePartidoPolitico = {
    _count: PartidoPoliticoCountAggregateOutputType | null
    _avg: PartidoPoliticoAvgAggregateOutputType | null
    _sum: PartidoPoliticoSumAggregateOutputType | null
    _min: PartidoPoliticoMinAggregateOutputType | null
    _max: PartidoPoliticoMaxAggregateOutputType | null
  }

  export type PartidoPoliticoAvgAggregateOutputType = {
    id: number | null
  }

  export type PartidoPoliticoSumAggregateOutputType = {
    id: number | null
  }

  export type PartidoPoliticoMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    logo: string | null
  }

  export type PartidoPoliticoMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    logo: string | null
  }

  export type PartidoPoliticoCountAggregateOutputType = {
    id: number
    nombre: number
    logo: number
    _all: number
  }


  export type PartidoPoliticoAvgAggregateInputType = {
    id?: true
  }

  export type PartidoPoliticoSumAggregateInputType = {
    id?: true
  }

  export type PartidoPoliticoMinAggregateInputType = {
    id?: true
    nombre?: true
    logo?: true
  }

  export type PartidoPoliticoMaxAggregateInputType = {
    id?: true
    nombre?: true
    logo?: true
  }

  export type PartidoPoliticoCountAggregateInputType = {
    id?: true
    nombre?: true
    logo?: true
    _all?: true
  }

  export type PartidoPoliticoAggregateArgs = {
    /**
     * Filter which partidoPolitico to aggregate.
     * 
    **/
    where?: partidoPoliticoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of partidoPoliticos to fetch.
     * 
    **/
    orderBy?: Enumerable<partidoPoliticoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: partidoPoliticoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` partidoPoliticos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` partidoPoliticos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned partidoPoliticos
    **/
    _count?: true | PartidoPoliticoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PartidoPoliticoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PartidoPoliticoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PartidoPoliticoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PartidoPoliticoMaxAggregateInputType
  }

  export type GetPartidoPoliticoAggregateType<T extends PartidoPoliticoAggregateArgs> = {
        [P in keyof T & keyof AggregatePartidoPolitico]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePartidoPolitico[P]>
      : GetScalarType<T[P], AggregatePartidoPolitico[P]>
  }




  export type PartidoPoliticoGroupByArgs = {
    where?: partidoPoliticoWhereInput
    orderBy?: Enumerable<partidoPoliticoOrderByWithAggregationInput>
    by: Array<PartidoPoliticoScalarFieldEnum>
    having?: partidoPoliticoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PartidoPoliticoCountAggregateInputType | true
    _avg?: PartidoPoliticoAvgAggregateInputType
    _sum?: PartidoPoliticoSumAggregateInputType
    _min?: PartidoPoliticoMinAggregateInputType
    _max?: PartidoPoliticoMaxAggregateInputType
  }


  export type PartidoPoliticoGroupByOutputType = {
    id: number
    nombre: string
    logo: string
    _count: PartidoPoliticoCountAggregateOutputType | null
    _avg: PartidoPoliticoAvgAggregateOutputType | null
    _sum: PartidoPoliticoSumAggregateOutputType | null
    _min: PartidoPoliticoMinAggregateOutputType | null
    _max: PartidoPoliticoMaxAggregateOutputType | null
  }

  type GetPartidoPoliticoGroupByPayload<T extends PartidoPoliticoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PartidoPoliticoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PartidoPoliticoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PartidoPoliticoGroupByOutputType[P]>
            : GetScalarType<T[P], PartidoPoliticoGroupByOutputType[P]>
        }
      >
    >


  export type partidoPoliticoSelect = {
    id?: boolean
    nombre?: boolean
    logo?: boolean
    candidatos?: boolean | CandidatoFindManyArgs
    _count?: boolean | PartidoPoliticoCountOutputTypeArgs
  }

  export type partidoPoliticoInclude = {
    candidatos?: boolean | CandidatoFindManyArgs
    _count?: boolean | PartidoPoliticoCountOutputTypeArgs
  }

  export type partidoPoliticoGetPayload<
    S extends boolean | null | undefined | partidoPoliticoArgs,
    U = keyof S
      > = S extends true
        ? partidoPolitico
    : S extends undefined
    ? never
    : S extends partidoPoliticoArgs | partidoPoliticoFindManyArgs
    ?'include' extends U
    ? partidoPolitico  & {
    [P in TrueKeys<S['include']>]:
        P extends 'candidatos' ? Array < CandidatoGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? PartidoPoliticoCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'candidatos' ? Array < CandidatoGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? PartidoPoliticoCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof partidoPolitico ? partidoPolitico[P] : never
  } 
    : partidoPolitico
  : partidoPolitico


  type partidoPoliticoCountArgs = Merge<
    Omit<partidoPoliticoFindManyArgs, 'select' | 'include'> & {
      select?: PartidoPoliticoCountAggregateInputType | true
    }
  >

  export interface partidoPoliticoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one PartidoPolitico that matches the filter.
     * @param {partidoPoliticoFindUniqueArgs} args - Arguments to find a PartidoPolitico
     * @example
     * // Get one PartidoPolitico
     * const partidoPolitico = await prisma.partidoPolitico.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends partidoPoliticoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, partidoPoliticoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'partidoPolitico'> extends True ? CheckSelect<T, Prisma__partidoPoliticoClient<partidoPolitico>, Prisma__partidoPoliticoClient<partidoPoliticoGetPayload<T>>> : CheckSelect<T, Prisma__partidoPoliticoClient<partidoPolitico | null, null>, Prisma__partidoPoliticoClient<partidoPoliticoGetPayload<T> | null, null>>

    /**
     * Find the first PartidoPolitico that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {partidoPoliticoFindFirstArgs} args - Arguments to find a PartidoPolitico
     * @example
     * // Get one PartidoPolitico
     * const partidoPolitico = await prisma.partidoPolitico.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends partidoPoliticoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, partidoPoliticoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'partidoPolitico'> extends True ? CheckSelect<T, Prisma__partidoPoliticoClient<partidoPolitico>, Prisma__partidoPoliticoClient<partidoPoliticoGetPayload<T>>> : CheckSelect<T, Prisma__partidoPoliticoClient<partidoPolitico | null, null>, Prisma__partidoPoliticoClient<partidoPoliticoGetPayload<T> | null, null>>

    /**
     * Find zero or more PartidoPoliticos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {partidoPoliticoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PartidoPoliticos
     * const partidoPoliticos = await prisma.partidoPolitico.findMany()
     * 
     * // Get first 10 PartidoPoliticos
     * const partidoPoliticos = await prisma.partidoPolitico.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const partidoPoliticoWithIdOnly = await prisma.partidoPolitico.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends partidoPoliticoFindManyArgs>(
      args?: SelectSubset<T, partidoPoliticoFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<partidoPolitico>>, PrismaPromise<Array<partidoPoliticoGetPayload<T>>>>

    /**
     * Create a PartidoPolitico.
     * @param {partidoPoliticoCreateArgs} args - Arguments to create a PartidoPolitico.
     * @example
     * // Create one PartidoPolitico
     * const PartidoPolitico = await prisma.partidoPolitico.create({
     *   data: {
     *     // ... data to create a PartidoPolitico
     *   }
     * })
     * 
    **/
    create<T extends partidoPoliticoCreateArgs>(
      args: SelectSubset<T, partidoPoliticoCreateArgs>
    ): CheckSelect<T, Prisma__partidoPoliticoClient<partidoPolitico>, Prisma__partidoPoliticoClient<partidoPoliticoGetPayload<T>>>

    /**
     * Create many PartidoPoliticos.
     *     @param {partidoPoliticoCreateManyArgs} args - Arguments to create many PartidoPoliticos.
     *     @example
     *     // Create many PartidoPoliticos
     *     const partidoPolitico = await prisma.partidoPolitico.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends partidoPoliticoCreateManyArgs>(
      args?: SelectSubset<T, partidoPoliticoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a PartidoPolitico.
     * @param {partidoPoliticoDeleteArgs} args - Arguments to delete one PartidoPolitico.
     * @example
     * // Delete one PartidoPolitico
     * const PartidoPolitico = await prisma.partidoPolitico.delete({
     *   where: {
     *     // ... filter to delete one PartidoPolitico
     *   }
     * })
     * 
    **/
    delete<T extends partidoPoliticoDeleteArgs>(
      args: SelectSubset<T, partidoPoliticoDeleteArgs>
    ): CheckSelect<T, Prisma__partidoPoliticoClient<partidoPolitico>, Prisma__partidoPoliticoClient<partidoPoliticoGetPayload<T>>>

    /**
     * Update one PartidoPolitico.
     * @param {partidoPoliticoUpdateArgs} args - Arguments to update one PartidoPolitico.
     * @example
     * // Update one PartidoPolitico
     * const partidoPolitico = await prisma.partidoPolitico.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends partidoPoliticoUpdateArgs>(
      args: SelectSubset<T, partidoPoliticoUpdateArgs>
    ): CheckSelect<T, Prisma__partidoPoliticoClient<partidoPolitico>, Prisma__partidoPoliticoClient<partidoPoliticoGetPayload<T>>>

    /**
     * Delete zero or more PartidoPoliticos.
     * @param {partidoPoliticoDeleteManyArgs} args - Arguments to filter PartidoPoliticos to delete.
     * @example
     * // Delete a few PartidoPoliticos
     * const { count } = await prisma.partidoPolitico.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends partidoPoliticoDeleteManyArgs>(
      args?: SelectSubset<T, partidoPoliticoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more PartidoPoliticos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {partidoPoliticoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PartidoPoliticos
     * const partidoPolitico = await prisma.partidoPolitico.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends partidoPoliticoUpdateManyArgs>(
      args: SelectSubset<T, partidoPoliticoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one PartidoPolitico.
     * @param {partidoPoliticoUpsertArgs} args - Arguments to update or create a PartidoPolitico.
     * @example
     * // Update or create a PartidoPolitico
     * const partidoPolitico = await prisma.partidoPolitico.upsert({
     *   create: {
     *     // ... data to create a PartidoPolitico
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PartidoPolitico we want to update
     *   }
     * })
    **/
    upsert<T extends partidoPoliticoUpsertArgs>(
      args: SelectSubset<T, partidoPoliticoUpsertArgs>
    ): CheckSelect<T, Prisma__partidoPoliticoClient<partidoPolitico>, Prisma__partidoPoliticoClient<partidoPoliticoGetPayload<T>>>

    /**
     * Find one PartidoPolitico that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {partidoPoliticoFindUniqueOrThrowArgs} args - Arguments to find a PartidoPolitico
     * @example
     * // Get one PartidoPolitico
     * const partidoPolitico = await prisma.partidoPolitico.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends partidoPoliticoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, partidoPoliticoFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__partidoPoliticoClient<partidoPolitico>, Prisma__partidoPoliticoClient<partidoPoliticoGetPayload<T>>>

    /**
     * Find the first PartidoPolitico that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {partidoPoliticoFindFirstOrThrowArgs} args - Arguments to find a PartidoPolitico
     * @example
     * // Get one PartidoPolitico
     * const partidoPolitico = await prisma.partidoPolitico.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends partidoPoliticoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, partidoPoliticoFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__partidoPoliticoClient<partidoPolitico>, Prisma__partidoPoliticoClient<partidoPoliticoGetPayload<T>>>

    /**
     * Count the number of PartidoPoliticos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {partidoPoliticoCountArgs} args - Arguments to filter PartidoPoliticos to count.
     * @example
     * // Count the number of PartidoPoliticos
     * const count = await prisma.partidoPolitico.count({
     *   where: {
     *     // ... the filter for the PartidoPoliticos we want to count
     *   }
     * })
    **/
    count<T extends partidoPoliticoCountArgs>(
      args?: Subset<T, partidoPoliticoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PartidoPoliticoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PartidoPolitico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartidoPoliticoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PartidoPoliticoAggregateArgs>(args: Subset<T, PartidoPoliticoAggregateArgs>): PrismaPromise<GetPartidoPoliticoAggregateType<T>>

    /**
     * Group by PartidoPolitico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartidoPoliticoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PartidoPoliticoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PartidoPoliticoGroupByArgs['orderBy'] }
        : { orderBy?: PartidoPoliticoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PartidoPoliticoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPartidoPoliticoGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for partidoPolitico.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__partidoPoliticoClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    candidatos<T extends CandidatoFindManyArgs = {}>(args?: Subset<T, CandidatoFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Candidato>| Null>, PrismaPromise<Array<CandidatoGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * partidoPolitico base type for findUnique actions
   */
  export type partidoPoliticoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the partidoPolitico
     * 
    **/
    select?: partidoPoliticoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: partidoPoliticoInclude | null
    /**
     * Filter, which partidoPolitico to fetch.
     * 
    **/
    where: partidoPoliticoWhereUniqueInput
  }

  /**
   * partidoPolitico: findUnique
   */
  export interface partidoPoliticoFindUniqueArgs extends partidoPoliticoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * partidoPolitico base type for findFirst actions
   */
  export type partidoPoliticoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the partidoPolitico
     * 
    **/
    select?: partidoPoliticoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: partidoPoliticoInclude | null
    /**
     * Filter, which partidoPolitico to fetch.
     * 
    **/
    where?: partidoPoliticoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of partidoPoliticos to fetch.
     * 
    **/
    orderBy?: Enumerable<partidoPoliticoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for partidoPoliticos.
     * 
    **/
    cursor?: partidoPoliticoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` partidoPoliticos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` partidoPoliticos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of partidoPoliticos.
     * 
    **/
    distinct?: Enumerable<PartidoPoliticoScalarFieldEnum>
  }

  /**
   * partidoPolitico: findFirst
   */
  export interface partidoPoliticoFindFirstArgs extends partidoPoliticoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * partidoPolitico findMany
   */
  export type partidoPoliticoFindManyArgs = {
    /**
     * Select specific fields to fetch from the partidoPolitico
     * 
    **/
    select?: partidoPoliticoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: partidoPoliticoInclude | null
    /**
     * Filter, which partidoPoliticos to fetch.
     * 
    **/
    where?: partidoPoliticoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of partidoPoliticos to fetch.
     * 
    **/
    orderBy?: Enumerable<partidoPoliticoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing partidoPoliticos.
     * 
    **/
    cursor?: partidoPoliticoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` partidoPoliticos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` partidoPoliticos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PartidoPoliticoScalarFieldEnum>
  }


  /**
   * partidoPolitico create
   */
  export type partidoPoliticoCreateArgs = {
    /**
     * Select specific fields to fetch from the partidoPolitico
     * 
    **/
    select?: partidoPoliticoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: partidoPoliticoInclude | null
    /**
     * The data needed to create a partidoPolitico.
     * 
    **/
    data: XOR<partidoPoliticoCreateInput, partidoPoliticoUncheckedCreateInput>
  }


  /**
   * partidoPolitico createMany
   */
  export type partidoPoliticoCreateManyArgs = {
    /**
     * The data used to create many partidoPoliticos.
     * 
    **/
    data: Enumerable<partidoPoliticoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * partidoPolitico update
   */
  export type partidoPoliticoUpdateArgs = {
    /**
     * Select specific fields to fetch from the partidoPolitico
     * 
    **/
    select?: partidoPoliticoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: partidoPoliticoInclude | null
    /**
     * The data needed to update a partidoPolitico.
     * 
    **/
    data: XOR<partidoPoliticoUpdateInput, partidoPoliticoUncheckedUpdateInput>
    /**
     * Choose, which partidoPolitico to update.
     * 
    **/
    where: partidoPoliticoWhereUniqueInput
  }


  /**
   * partidoPolitico updateMany
   */
  export type partidoPoliticoUpdateManyArgs = {
    /**
     * The data used to update partidoPoliticos.
     * 
    **/
    data: XOR<partidoPoliticoUpdateManyMutationInput, partidoPoliticoUncheckedUpdateManyInput>
    /**
     * Filter which partidoPoliticos to update
     * 
    **/
    where?: partidoPoliticoWhereInput
  }


  /**
   * partidoPolitico upsert
   */
  export type partidoPoliticoUpsertArgs = {
    /**
     * Select specific fields to fetch from the partidoPolitico
     * 
    **/
    select?: partidoPoliticoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: partidoPoliticoInclude | null
    /**
     * The filter to search for the partidoPolitico to update in case it exists.
     * 
    **/
    where: partidoPoliticoWhereUniqueInput
    /**
     * In case the partidoPolitico found by the `where` argument doesn't exist, create a new partidoPolitico with this data.
     * 
    **/
    create: XOR<partidoPoliticoCreateInput, partidoPoliticoUncheckedCreateInput>
    /**
     * In case the partidoPolitico was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<partidoPoliticoUpdateInput, partidoPoliticoUncheckedUpdateInput>
  }


  /**
   * partidoPolitico delete
   */
  export type partidoPoliticoDeleteArgs = {
    /**
     * Select specific fields to fetch from the partidoPolitico
     * 
    **/
    select?: partidoPoliticoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: partidoPoliticoInclude | null
    /**
     * Filter which partidoPolitico to delete.
     * 
    **/
    where: partidoPoliticoWhereUniqueInput
  }


  /**
   * partidoPolitico deleteMany
   */
  export type partidoPoliticoDeleteManyArgs = {
    /**
     * Filter which partidoPoliticos to delete
     * 
    **/
    where?: partidoPoliticoWhereInput
  }


  /**
   * partidoPolitico: findUniqueOrThrow
   */
  export type partidoPoliticoFindUniqueOrThrowArgs = partidoPoliticoFindUniqueArgsBase
      

  /**
   * partidoPolitico: findFirstOrThrow
   */
  export type partidoPoliticoFindFirstOrThrowArgs = partidoPoliticoFindFirstArgsBase
      

  /**
   * partidoPolitico without action
   */
  export type partidoPoliticoArgs = {
    /**
     * Select specific fields to fetch from the partidoPolitico
     * 
    **/
    select?: partidoPoliticoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: partidoPoliticoInclude | null
  }



  /**
   * Model Region
   */


  export type AggregateRegion = {
    _count: RegionCountAggregateOutputType | null
    _avg: RegionAvgAggregateOutputType | null
    _sum: RegionSumAggregateOutputType | null
    _min: RegionMinAggregateOutputType | null
    _max: RegionMaxAggregateOutputType | null
  }

  export type RegionAvgAggregateOutputType = {
    id: number | null
  }

  export type RegionSumAggregateOutputType = {
    id: number | null
  }

  export type RegionMinAggregateOutputType = {
    id: number | null
    nombre: string | null
  }

  export type RegionMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
  }

  export type RegionCountAggregateOutputType = {
    id: number
    nombre: number
    _all: number
  }


  export type RegionAvgAggregateInputType = {
    id?: true
  }

  export type RegionSumAggregateInputType = {
    id?: true
  }

  export type RegionMinAggregateInputType = {
    id?: true
    nombre?: true
  }

  export type RegionMaxAggregateInputType = {
    id?: true
    nombre?: true
  }

  export type RegionCountAggregateInputType = {
    id?: true
    nombre?: true
    _all?: true
  }

  export type RegionAggregateArgs = {
    /**
     * Filter which Region to aggregate.
     * 
    **/
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     * 
    **/
    orderBy?: Enumerable<RegionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Regions
    **/
    _count?: true | RegionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RegionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RegionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegionMaxAggregateInputType
  }

  export type GetRegionAggregateType<T extends RegionAggregateArgs> = {
        [P in keyof T & keyof AggregateRegion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegion[P]>
      : GetScalarType<T[P], AggregateRegion[P]>
  }




  export type RegionGroupByArgs = {
    where?: RegionWhereInput
    orderBy?: Enumerable<RegionOrderByWithAggregationInput>
    by: Array<RegionScalarFieldEnum>
    having?: RegionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegionCountAggregateInputType | true
    _avg?: RegionAvgAggregateInputType
    _sum?: RegionSumAggregateInputType
    _min?: RegionMinAggregateInputType
    _max?: RegionMaxAggregateInputType
  }


  export type RegionGroupByOutputType = {
    id: number
    nombre: string
    _count: RegionCountAggregateOutputType | null
    _avg: RegionAvgAggregateOutputType | null
    _sum: RegionSumAggregateOutputType | null
    _min: RegionMinAggregateOutputType | null
    _max: RegionMaxAggregateOutputType | null
  }

  type GetRegionGroupByPayload<T extends RegionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RegionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegionGroupByOutputType[P]>
            : GetScalarType<T[P], RegionGroupByOutputType[P]>
        }
      >
    >


  export type RegionSelect = {
    id?: boolean
    nombre?: boolean
    candidatos?: boolean | CandidatoFindManyArgs
    votantes?: boolean | VotanteFindManyArgs
    _count?: boolean | RegionCountOutputTypeArgs
  }

  export type RegionInclude = {
    candidatos?: boolean | CandidatoFindManyArgs
    votantes?: boolean | VotanteFindManyArgs
    _count?: boolean | RegionCountOutputTypeArgs
  }

  export type RegionGetPayload<
    S extends boolean | null | undefined | RegionArgs,
    U = keyof S
      > = S extends true
        ? Region
    : S extends undefined
    ? never
    : S extends RegionArgs | RegionFindManyArgs
    ?'include' extends U
    ? Region  & {
    [P in TrueKeys<S['include']>]:
        P extends 'candidatos' ? Array < CandidatoGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'votantes' ? Array < VotanteGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? RegionCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'candidatos' ? Array < CandidatoGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'votantes' ? Array < VotanteGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? RegionCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Region ? Region[P] : never
  } 
    : Region
  : Region


  type RegionCountArgs = Merge<
    Omit<RegionFindManyArgs, 'select' | 'include'> & {
      select?: RegionCountAggregateInputType | true
    }
  >

  export interface RegionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Region that matches the filter.
     * @param {RegionFindUniqueArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RegionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RegionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Region'> extends True ? CheckSelect<T, Prisma__RegionClient<Region>, Prisma__RegionClient<RegionGetPayload<T>>> : CheckSelect<T, Prisma__RegionClient<Region | null, null>, Prisma__RegionClient<RegionGetPayload<T> | null, null>>

    /**
     * Find the first Region that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindFirstArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RegionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RegionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Region'> extends True ? CheckSelect<T, Prisma__RegionClient<Region>, Prisma__RegionClient<RegionGetPayload<T>>> : CheckSelect<T, Prisma__RegionClient<Region | null, null>, Prisma__RegionClient<RegionGetPayload<T> | null, null>>

    /**
     * Find zero or more Regions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Regions
     * const regions = await prisma.region.findMany()
     * 
     * // Get first 10 Regions
     * const regions = await prisma.region.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const regionWithIdOnly = await prisma.region.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RegionFindManyArgs>(
      args?: SelectSubset<T, RegionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Region>>, PrismaPromise<Array<RegionGetPayload<T>>>>

    /**
     * Create a Region.
     * @param {RegionCreateArgs} args - Arguments to create a Region.
     * @example
     * // Create one Region
     * const Region = await prisma.region.create({
     *   data: {
     *     // ... data to create a Region
     *   }
     * })
     * 
    **/
    create<T extends RegionCreateArgs>(
      args: SelectSubset<T, RegionCreateArgs>
    ): CheckSelect<T, Prisma__RegionClient<Region>, Prisma__RegionClient<RegionGetPayload<T>>>

    /**
     * Create many Regions.
     *     @param {RegionCreateManyArgs} args - Arguments to create many Regions.
     *     @example
     *     // Create many Regions
     *     const region = await prisma.region.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RegionCreateManyArgs>(
      args?: SelectSubset<T, RegionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Region.
     * @param {RegionDeleteArgs} args - Arguments to delete one Region.
     * @example
     * // Delete one Region
     * const Region = await prisma.region.delete({
     *   where: {
     *     // ... filter to delete one Region
     *   }
     * })
     * 
    **/
    delete<T extends RegionDeleteArgs>(
      args: SelectSubset<T, RegionDeleteArgs>
    ): CheckSelect<T, Prisma__RegionClient<Region>, Prisma__RegionClient<RegionGetPayload<T>>>

    /**
     * Update one Region.
     * @param {RegionUpdateArgs} args - Arguments to update one Region.
     * @example
     * // Update one Region
     * const region = await prisma.region.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RegionUpdateArgs>(
      args: SelectSubset<T, RegionUpdateArgs>
    ): CheckSelect<T, Prisma__RegionClient<Region>, Prisma__RegionClient<RegionGetPayload<T>>>

    /**
     * Delete zero or more Regions.
     * @param {RegionDeleteManyArgs} args - Arguments to filter Regions to delete.
     * @example
     * // Delete a few Regions
     * const { count } = await prisma.region.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RegionDeleteManyArgs>(
      args?: SelectSubset<T, RegionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Regions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Regions
     * const region = await prisma.region.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RegionUpdateManyArgs>(
      args: SelectSubset<T, RegionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Region.
     * @param {RegionUpsertArgs} args - Arguments to update or create a Region.
     * @example
     * // Update or create a Region
     * const region = await prisma.region.upsert({
     *   create: {
     *     // ... data to create a Region
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Region we want to update
     *   }
     * })
    **/
    upsert<T extends RegionUpsertArgs>(
      args: SelectSubset<T, RegionUpsertArgs>
    ): CheckSelect<T, Prisma__RegionClient<Region>, Prisma__RegionClient<RegionGetPayload<T>>>

    /**
     * Find one Region that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {RegionFindUniqueOrThrowArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RegionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RegionFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__RegionClient<Region>, Prisma__RegionClient<RegionGetPayload<T>>>

    /**
     * Find the first Region that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindFirstOrThrowArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RegionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RegionFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__RegionClient<Region>, Prisma__RegionClient<RegionGetPayload<T>>>

    /**
     * Count the number of Regions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionCountArgs} args - Arguments to filter Regions to count.
     * @example
     * // Count the number of Regions
     * const count = await prisma.region.count({
     *   where: {
     *     // ... the filter for the Regions we want to count
     *   }
     * })
    **/
    count<T extends RegionCountArgs>(
      args?: Subset<T, RegionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Region.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegionAggregateArgs>(args: Subset<T, RegionAggregateArgs>): PrismaPromise<GetRegionAggregateType<T>>

    /**
     * Group by Region.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegionGroupByArgs['orderBy'] }
        : { orderBy?: RegionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegionGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Region.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RegionClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    candidatos<T extends CandidatoFindManyArgs = {}>(args?: Subset<T, CandidatoFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Candidato>| Null>, PrismaPromise<Array<CandidatoGetPayload<T>>| Null>>;

    votantes<T extends VotanteFindManyArgs = {}>(args?: Subset<T, VotanteFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Votante>| Null>, PrismaPromise<Array<VotanteGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Region base type for findUnique actions
   */
  export type RegionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Region
     * 
    **/
    select?: RegionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RegionInclude | null
    /**
     * Filter, which Region to fetch.
     * 
    **/
    where: RegionWhereUniqueInput
  }

  /**
   * Region: findUnique
   */
  export interface RegionFindUniqueArgs extends RegionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Region base type for findFirst actions
   */
  export type RegionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Region
     * 
    **/
    select?: RegionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RegionInclude | null
    /**
     * Filter, which Region to fetch.
     * 
    **/
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     * 
    **/
    orderBy?: Enumerable<RegionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Regions.
     * 
    **/
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Regions.
     * 
    **/
    distinct?: Enumerable<RegionScalarFieldEnum>
  }

  /**
   * Region: findFirst
   */
  export interface RegionFindFirstArgs extends RegionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Region findMany
   */
  export type RegionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Region
     * 
    **/
    select?: RegionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RegionInclude | null
    /**
     * Filter, which Regions to fetch.
     * 
    **/
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     * 
    **/
    orderBy?: Enumerable<RegionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Regions.
     * 
    **/
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RegionScalarFieldEnum>
  }


  /**
   * Region create
   */
  export type RegionCreateArgs = {
    /**
     * Select specific fields to fetch from the Region
     * 
    **/
    select?: RegionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RegionInclude | null
    /**
     * The data needed to create a Region.
     * 
    **/
    data: XOR<RegionCreateInput, RegionUncheckedCreateInput>
  }


  /**
   * Region createMany
   */
  export type RegionCreateManyArgs = {
    /**
     * The data used to create many Regions.
     * 
    **/
    data: Enumerable<RegionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Region update
   */
  export type RegionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Region
     * 
    **/
    select?: RegionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RegionInclude | null
    /**
     * The data needed to update a Region.
     * 
    **/
    data: XOR<RegionUpdateInput, RegionUncheckedUpdateInput>
    /**
     * Choose, which Region to update.
     * 
    **/
    where: RegionWhereUniqueInput
  }


  /**
   * Region updateMany
   */
  export type RegionUpdateManyArgs = {
    /**
     * The data used to update Regions.
     * 
    **/
    data: XOR<RegionUpdateManyMutationInput, RegionUncheckedUpdateManyInput>
    /**
     * Filter which Regions to update
     * 
    **/
    where?: RegionWhereInput
  }


  /**
   * Region upsert
   */
  export type RegionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Region
     * 
    **/
    select?: RegionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RegionInclude | null
    /**
     * The filter to search for the Region to update in case it exists.
     * 
    **/
    where: RegionWhereUniqueInput
    /**
     * In case the Region found by the `where` argument doesn't exist, create a new Region with this data.
     * 
    **/
    create: XOR<RegionCreateInput, RegionUncheckedCreateInput>
    /**
     * In case the Region was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<RegionUpdateInput, RegionUncheckedUpdateInput>
  }


  /**
   * Region delete
   */
  export type RegionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Region
     * 
    **/
    select?: RegionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RegionInclude | null
    /**
     * Filter which Region to delete.
     * 
    **/
    where: RegionWhereUniqueInput
  }


  /**
   * Region deleteMany
   */
  export type RegionDeleteManyArgs = {
    /**
     * Filter which Regions to delete
     * 
    **/
    where?: RegionWhereInput
  }


  /**
   * Region: findUniqueOrThrow
   */
  export type RegionFindUniqueOrThrowArgs = RegionFindUniqueArgsBase
      

  /**
   * Region: findFirstOrThrow
   */
  export type RegionFindFirstOrThrowArgs = RegionFindFirstArgsBase
      

  /**
   * Region without action
   */
  export type RegionArgs = {
    /**
     * Select specific fields to fetch from the Region
     * 
    **/
    select?: RegionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RegionInclude | null
  }



  /**
   * Model Votante
   */


  export type AggregateVotante = {
    _count: VotanteCountAggregateOutputType | null
    _avg: VotanteAvgAggregateOutputType | null
    _sum: VotanteSumAggregateOutputType | null
    _min: VotanteMinAggregateOutputType | null
    _max: VotanteMaxAggregateOutputType | null
  }

  export type VotanteAvgAggregateOutputType = {
    regionId: number | null
  }

  export type VotanteSumAggregateOutputType = {
    regionId: number | null
  }

  export type VotanteMinAggregateOutputType = {
    dni: string | null
    nombre: string | null
    apellido: string | null
    regionId: number | null
  }

  export type VotanteMaxAggregateOutputType = {
    dni: string | null
    nombre: string | null
    apellido: string | null
    regionId: number | null
  }

  export type VotanteCountAggregateOutputType = {
    dni: number
    nombre: number
    apellido: number
    regionId: number
    _all: number
  }


  export type VotanteAvgAggregateInputType = {
    regionId?: true
  }

  export type VotanteSumAggregateInputType = {
    regionId?: true
  }

  export type VotanteMinAggregateInputType = {
    dni?: true
    nombre?: true
    apellido?: true
    regionId?: true
  }

  export type VotanteMaxAggregateInputType = {
    dni?: true
    nombre?: true
    apellido?: true
    regionId?: true
  }

  export type VotanteCountAggregateInputType = {
    dni?: true
    nombre?: true
    apellido?: true
    regionId?: true
    _all?: true
  }

  export type VotanteAggregateArgs = {
    /**
     * Filter which Votante to aggregate.
     * 
    **/
    where?: VotanteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votantes to fetch.
     * 
    **/
    orderBy?: Enumerable<VotanteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: VotanteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votantes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votantes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Votantes
    **/
    _count?: true | VotanteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VotanteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VotanteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VotanteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VotanteMaxAggregateInputType
  }

  export type GetVotanteAggregateType<T extends VotanteAggregateArgs> = {
        [P in keyof T & keyof AggregateVotante]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVotante[P]>
      : GetScalarType<T[P], AggregateVotante[P]>
  }




  export type VotanteGroupByArgs = {
    where?: VotanteWhereInput
    orderBy?: Enumerable<VotanteOrderByWithAggregationInput>
    by: Array<VotanteScalarFieldEnum>
    having?: VotanteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VotanteCountAggregateInputType | true
    _avg?: VotanteAvgAggregateInputType
    _sum?: VotanteSumAggregateInputType
    _min?: VotanteMinAggregateInputType
    _max?: VotanteMaxAggregateInputType
  }


  export type VotanteGroupByOutputType = {
    dni: string
    nombre: string
    apellido: string
    regionId: number
    _count: VotanteCountAggregateOutputType | null
    _avg: VotanteAvgAggregateOutputType | null
    _sum: VotanteSumAggregateOutputType | null
    _min: VotanteMinAggregateOutputType | null
    _max: VotanteMaxAggregateOutputType | null
  }

  type GetVotanteGroupByPayload<T extends VotanteGroupByArgs> = PrismaPromise<
    Array<
      PickArray<VotanteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VotanteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VotanteGroupByOutputType[P]>
            : GetScalarType<T[P], VotanteGroupByOutputType[P]>
        }
      >
    >


  export type VotanteSelect = {
    dni?: boolean
    nombre?: boolean
    apellido?: boolean
    regionId?: boolean
    region?: boolean | RegionArgs
    sufragios?: boolean | SufragioFindManyArgs
    _count?: boolean | VotanteCountOutputTypeArgs
  }

  export type VotanteInclude = {
    region?: boolean | RegionArgs
    sufragios?: boolean | SufragioFindManyArgs
    _count?: boolean | VotanteCountOutputTypeArgs
  }

  export type VotanteGetPayload<
    S extends boolean | null | undefined | VotanteArgs,
    U = keyof S
      > = S extends true
        ? Votante
    : S extends undefined
    ? never
    : S extends VotanteArgs | VotanteFindManyArgs
    ?'include' extends U
    ? Votante  & {
    [P in TrueKeys<S['include']>]:
        P extends 'region' ? RegionGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'sufragios' ? Array < SufragioGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? VotanteCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'region' ? RegionGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'sufragios' ? Array < SufragioGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? VotanteCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Votante ? Votante[P] : never
  } 
    : Votante
  : Votante


  type VotanteCountArgs = Merge<
    Omit<VotanteFindManyArgs, 'select' | 'include'> & {
      select?: VotanteCountAggregateInputType | true
    }
  >

  export interface VotanteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Votante that matches the filter.
     * @param {VotanteFindUniqueArgs} args - Arguments to find a Votante
     * @example
     * // Get one Votante
     * const votante = await prisma.votante.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VotanteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VotanteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Votante'> extends True ? CheckSelect<T, Prisma__VotanteClient<Votante>, Prisma__VotanteClient<VotanteGetPayload<T>>> : CheckSelect<T, Prisma__VotanteClient<Votante | null, null>, Prisma__VotanteClient<VotanteGetPayload<T> | null, null>>

    /**
     * Find the first Votante that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VotanteFindFirstArgs} args - Arguments to find a Votante
     * @example
     * // Get one Votante
     * const votante = await prisma.votante.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VotanteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VotanteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Votante'> extends True ? CheckSelect<T, Prisma__VotanteClient<Votante>, Prisma__VotanteClient<VotanteGetPayload<T>>> : CheckSelect<T, Prisma__VotanteClient<Votante | null, null>, Prisma__VotanteClient<VotanteGetPayload<T> | null, null>>

    /**
     * Find zero or more Votantes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VotanteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Votantes
     * const votantes = await prisma.votante.findMany()
     * 
     * // Get first 10 Votantes
     * const votantes = await prisma.votante.findMany({ take: 10 })
     * 
     * // Only select the `dni`
     * const votanteWithDniOnly = await prisma.votante.findMany({ select: { dni: true } })
     * 
    **/
    findMany<T extends VotanteFindManyArgs>(
      args?: SelectSubset<T, VotanteFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Votante>>, PrismaPromise<Array<VotanteGetPayload<T>>>>

    /**
     * Create a Votante.
     * @param {VotanteCreateArgs} args - Arguments to create a Votante.
     * @example
     * // Create one Votante
     * const Votante = await prisma.votante.create({
     *   data: {
     *     // ... data to create a Votante
     *   }
     * })
     * 
    **/
    create<T extends VotanteCreateArgs>(
      args: SelectSubset<T, VotanteCreateArgs>
    ): CheckSelect<T, Prisma__VotanteClient<Votante>, Prisma__VotanteClient<VotanteGetPayload<T>>>

    /**
     * Create many Votantes.
     *     @param {VotanteCreateManyArgs} args - Arguments to create many Votantes.
     *     @example
     *     // Create many Votantes
     *     const votante = await prisma.votante.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VotanteCreateManyArgs>(
      args?: SelectSubset<T, VotanteCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Votante.
     * @param {VotanteDeleteArgs} args - Arguments to delete one Votante.
     * @example
     * // Delete one Votante
     * const Votante = await prisma.votante.delete({
     *   where: {
     *     // ... filter to delete one Votante
     *   }
     * })
     * 
    **/
    delete<T extends VotanteDeleteArgs>(
      args: SelectSubset<T, VotanteDeleteArgs>
    ): CheckSelect<T, Prisma__VotanteClient<Votante>, Prisma__VotanteClient<VotanteGetPayload<T>>>

    /**
     * Update one Votante.
     * @param {VotanteUpdateArgs} args - Arguments to update one Votante.
     * @example
     * // Update one Votante
     * const votante = await prisma.votante.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VotanteUpdateArgs>(
      args: SelectSubset<T, VotanteUpdateArgs>
    ): CheckSelect<T, Prisma__VotanteClient<Votante>, Prisma__VotanteClient<VotanteGetPayload<T>>>

    /**
     * Delete zero or more Votantes.
     * @param {VotanteDeleteManyArgs} args - Arguments to filter Votantes to delete.
     * @example
     * // Delete a few Votantes
     * const { count } = await prisma.votante.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VotanteDeleteManyArgs>(
      args?: SelectSubset<T, VotanteDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Votantes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VotanteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Votantes
     * const votante = await prisma.votante.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VotanteUpdateManyArgs>(
      args: SelectSubset<T, VotanteUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Votante.
     * @param {VotanteUpsertArgs} args - Arguments to update or create a Votante.
     * @example
     * // Update or create a Votante
     * const votante = await prisma.votante.upsert({
     *   create: {
     *     // ... data to create a Votante
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Votante we want to update
     *   }
     * })
    **/
    upsert<T extends VotanteUpsertArgs>(
      args: SelectSubset<T, VotanteUpsertArgs>
    ): CheckSelect<T, Prisma__VotanteClient<Votante>, Prisma__VotanteClient<VotanteGetPayload<T>>>

    /**
     * Find one Votante that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {VotanteFindUniqueOrThrowArgs} args - Arguments to find a Votante
     * @example
     * // Get one Votante
     * const votante = await prisma.votante.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VotanteFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, VotanteFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__VotanteClient<Votante>, Prisma__VotanteClient<VotanteGetPayload<T>>>

    /**
     * Find the first Votante that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VotanteFindFirstOrThrowArgs} args - Arguments to find a Votante
     * @example
     * // Get one Votante
     * const votante = await prisma.votante.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VotanteFindFirstOrThrowArgs>(
      args?: SelectSubset<T, VotanteFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__VotanteClient<Votante>, Prisma__VotanteClient<VotanteGetPayload<T>>>

    /**
     * Count the number of Votantes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VotanteCountArgs} args - Arguments to filter Votantes to count.
     * @example
     * // Count the number of Votantes
     * const count = await prisma.votante.count({
     *   where: {
     *     // ... the filter for the Votantes we want to count
     *   }
     * })
    **/
    count<T extends VotanteCountArgs>(
      args?: Subset<T, VotanteCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VotanteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Votante.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VotanteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VotanteAggregateArgs>(args: Subset<T, VotanteAggregateArgs>): PrismaPromise<GetVotanteAggregateType<T>>

    /**
     * Group by Votante.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VotanteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VotanteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VotanteGroupByArgs['orderBy'] }
        : { orderBy?: VotanteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VotanteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVotanteGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Votante.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VotanteClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    region<T extends RegionArgs = {}>(args?: Subset<T, RegionArgs>): CheckSelect<T, Prisma__RegionClient<Region | Null>, Prisma__RegionClient<RegionGetPayload<T> | Null>>;

    sufragios<T extends SufragioFindManyArgs = {}>(args?: Subset<T, SufragioFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Sufragio>| Null>, PrismaPromise<Array<SufragioGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Votante base type for findUnique actions
   */
  export type VotanteFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Votante
     * 
    **/
    select?: VotanteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VotanteInclude | null
    /**
     * Filter, which Votante to fetch.
     * 
    **/
    where: VotanteWhereUniqueInput
  }

  /**
   * Votante: findUnique
   */
  export interface VotanteFindUniqueArgs extends VotanteFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Votante base type for findFirst actions
   */
  export type VotanteFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Votante
     * 
    **/
    select?: VotanteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VotanteInclude | null
    /**
     * Filter, which Votante to fetch.
     * 
    **/
    where?: VotanteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votantes to fetch.
     * 
    **/
    orderBy?: Enumerable<VotanteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Votantes.
     * 
    **/
    cursor?: VotanteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votantes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votantes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Votantes.
     * 
    **/
    distinct?: Enumerable<VotanteScalarFieldEnum>
  }

  /**
   * Votante: findFirst
   */
  export interface VotanteFindFirstArgs extends VotanteFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Votante findMany
   */
  export type VotanteFindManyArgs = {
    /**
     * Select specific fields to fetch from the Votante
     * 
    **/
    select?: VotanteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VotanteInclude | null
    /**
     * Filter, which Votantes to fetch.
     * 
    **/
    where?: VotanteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votantes to fetch.
     * 
    **/
    orderBy?: Enumerable<VotanteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Votantes.
     * 
    **/
    cursor?: VotanteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votantes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votantes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<VotanteScalarFieldEnum>
  }


  /**
   * Votante create
   */
  export type VotanteCreateArgs = {
    /**
     * Select specific fields to fetch from the Votante
     * 
    **/
    select?: VotanteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VotanteInclude | null
    /**
     * The data needed to create a Votante.
     * 
    **/
    data: XOR<VotanteCreateInput, VotanteUncheckedCreateInput>
  }


  /**
   * Votante createMany
   */
  export type VotanteCreateManyArgs = {
    /**
     * The data used to create many Votantes.
     * 
    **/
    data: Enumerable<VotanteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Votante update
   */
  export type VotanteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Votante
     * 
    **/
    select?: VotanteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VotanteInclude | null
    /**
     * The data needed to update a Votante.
     * 
    **/
    data: XOR<VotanteUpdateInput, VotanteUncheckedUpdateInput>
    /**
     * Choose, which Votante to update.
     * 
    **/
    where: VotanteWhereUniqueInput
  }


  /**
   * Votante updateMany
   */
  export type VotanteUpdateManyArgs = {
    /**
     * The data used to update Votantes.
     * 
    **/
    data: XOR<VotanteUpdateManyMutationInput, VotanteUncheckedUpdateManyInput>
    /**
     * Filter which Votantes to update
     * 
    **/
    where?: VotanteWhereInput
  }


  /**
   * Votante upsert
   */
  export type VotanteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Votante
     * 
    **/
    select?: VotanteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VotanteInclude | null
    /**
     * The filter to search for the Votante to update in case it exists.
     * 
    **/
    where: VotanteWhereUniqueInput
    /**
     * In case the Votante found by the `where` argument doesn't exist, create a new Votante with this data.
     * 
    **/
    create: XOR<VotanteCreateInput, VotanteUncheckedCreateInput>
    /**
     * In case the Votante was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<VotanteUpdateInput, VotanteUncheckedUpdateInput>
  }


  /**
   * Votante delete
   */
  export type VotanteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Votante
     * 
    **/
    select?: VotanteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VotanteInclude | null
    /**
     * Filter which Votante to delete.
     * 
    **/
    where: VotanteWhereUniqueInput
  }


  /**
   * Votante deleteMany
   */
  export type VotanteDeleteManyArgs = {
    /**
     * Filter which Votantes to delete
     * 
    **/
    where?: VotanteWhereInput
  }


  /**
   * Votante: findUniqueOrThrow
   */
  export type VotanteFindUniqueOrThrowArgs = VotanteFindUniqueArgsBase
      

  /**
   * Votante: findFirstOrThrow
   */
  export type VotanteFindFirstOrThrowArgs = VotanteFindFirstArgsBase
      

  /**
   * Votante without action
   */
  export type VotanteArgs = {
    /**
     * Select specific fields to fetch from the Votante
     * 
    **/
    select?: VotanteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VotanteInclude | null
  }



  /**
   * Model Candidato
   */


  export type AggregateCandidato = {
    _count: CandidatoCountAggregateOutputType | null
    _avg: CandidatoAvgAggregateOutputType | null
    _sum: CandidatoSumAggregateOutputType | null
    _min: CandidatoMinAggregateOutputType | null
    _max: CandidatoMaxAggregateOutputType | null
  }

  export type CandidatoAvgAggregateOutputType = {
    id: number | null
    partidoPoliticoId: number | null
    regionId: number | null
  }

  export type CandidatoSumAggregateOutputType = {
    id: number | null
    partidoPoliticoId: number | null
    regionId: number | null
  }

  export type CandidatoMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    apellido: string | null
    partidoPoliticoId: number | null
    regionId: number | null
  }

  export type CandidatoMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    apellido: string | null
    partidoPoliticoId: number | null
    regionId: number | null
  }

  export type CandidatoCountAggregateOutputType = {
    id: number
    nombre: number
    apellido: number
    partidoPoliticoId: number
    regionId: number
    _all: number
  }


  export type CandidatoAvgAggregateInputType = {
    id?: true
    partidoPoliticoId?: true
    regionId?: true
  }

  export type CandidatoSumAggregateInputType = {
    id?: true
    partidoPoliticoId?: true
    regionId?: true
  }

  export type CandidatoMinAggregateInputType = {
    id?: true
    nombre?: true
    apellido?: true
    partidoPoliticoId?: true
    regionId?: true
  }

  export type CandidatoMaxAggregateInputType = {
    id?: true
    nombre?: true
    apellido?: true
    partidoPoliticoId?: true
    regionId?: true
  }

  export type CandidatoCountAggregateInputType = {
    id?: true
    nombre?: true
    apellido?: true
    partidoPoliticoId?: true
    regionId?: true
    _all?: true
  }

  export type CandidatoAggregateArgs = {
    /**
     * Filter which Candidato to aggregate.
     * 
    **/
    where?: CandidatoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidatoes to fetch.
     * 
    **/
    orderBy?: Enumerable<CandidatoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CandidatoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidatoes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidatoes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Candidatoes
    **/
    _count?: true | CandidatoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CandidatoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CandidatoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CandidatoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CandidatoMaxAggregateInputType
  }

  export type GetCandidatoAggregateType<T extends CandidatoAggregateArgs> = {
        [P in keyof T & keyof AggregateCandidato]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCandidato[P]>
      : GetScalarType<T[P], AggregateCandidato[P]>
  }




  export type CandidatoGroupByArgs = {
    where?: CandidatoWhereInput
    orderBy?: Enumerable<CandidatoOrderByWithAggregationInput>
    by: Array<CandidatoScalarFieldEnum>
    having?: CandidatoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CandidatoCountAggregateInputType | true
    _avg?: CandidatoAvgAggregateInputType
    _sum?: CandidatoSumAggregateInputType
    _min?: CandidatoMinAggregateInputType
    _max?: CandidatoMaxAggregateInputType
  }


  export type CandidatoGroupByOutputType = {
    id: number
    nombre: string
    apellido: string
    partidoPoliticoId: number
    regionId: number
    _count: CandidatoCountAggregateOutputType | null
    _avg: CandidatoAvgAggregateOutputType | null
    _sum: CandidatoSumAggregateOutputType | null
    _min: CandidatoMinAggregateOutputType | null
    _max: CandidatoMaxAggregateOutputType | null
  }

  type GetCandidatoGroupByPayload<T extends CandidatoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CandidatoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CandidatoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CandidatoGroupByOutputType[P]>
            : GetScalarType<T[P], CandidatoGroupByOutputType[P]>
        }
      >
    >


  export type CandidatoSelect = {
    id?: boolean
    nombre?: boolean
    apellido?: boolean
    partidoPoliticoId?: boolean
    partidoPolitico?: boolean | partidoPoliticoArgs
    regionId?: boolean
    region?: boolean | RegionArgs
    sufragios?: boolean | SufragioFindManyArgs
    _count?: boolean | CandidatoCountOutputTypeArgs
  }

  export type CandidatoInclude = {
    partidoPolitico?: boolean | partidoPoliticoArgs
    region?: boolean | RegionArgs
    sufragios?: boolean | SufragioFindManyArgs
    _count?: boolean | CandidatoCountOutputTypeArgs
  }

  export type CandidatoGetPayload<
    S extends boolean | null | undefined | CandidatoArgs,
    U = keyof S
      > = S extends true
        ? Candidato
    : S extends undefined
    ? never
    : S extends CandidatoArgs | CandidatoFindManyArgs
    ?'include' extends U
    ? Candidato  & {
    [P in TrueKeys<S['include']>]:
        P extends 'partidoPolitico' ? partidoPoliticoGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'region' ? RegionGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'sufragios' ? Array < SufragioGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? CandidatoCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'partidoPolitico' ? partidoPoliticoGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'region' ? RegionGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'sufragios' ? Array < SufragioGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? CandidatoCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Candidato ? Candidato[P] : never
  } 
    : Candidato
  : Candidato


  type CandidatoCountArgs = Merge<
    Omit<CandidatoFindManyArgs, 'select' | 'include'> & {
      select?: CandidatoCountAggregateInputType | true
    }
  >

  export interface CandidatoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Candidato that matches the filter.
     * @param {CandidatoFindUniqueArgs} args - Arguments to find a Candidato
     * @example
     * // Get one Candidato
     * const candidato = await prisma.candidato.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CandidatoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CandidatoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Candidato'> extends True ? CheckSelect<T, Prisma__CandidatoClient<Candidato>, Prisma__CandidatoClient<CandidatoGetPayload<T>>> : CheckSelect<T, Prisma__CandidatoClient<Candidato | null, null>, Prisma__CandidatoClient<CandidatoGetPayload<T> | null, null>>

    /**
     * Find the first Candidato that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatoFindFirstArgs} args - Arguments to find a Candidato
     * @example
     * // Get one Candidato
     * const candidato = await prisma.candidato.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CandidatoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CandidatoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Candidato'> extends True ? CheckSelect<T, Prisma__CandidatoClient<Candidato>, Prisma__CandidatoClient<CandidatoGetPayload<T>>> : CheckSelect<T, Prisma__CandidatoClient<Candidato | null, null>, Prisma__CandidatoClient<CandidatoGetPayload<T> | null, null>>

    /**
     * Find zero or more Candidatoes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Candidatoes
     * const candidatoes = await prisma.candidato.findMany()
     * 
     * // Get first 10 Candidatoes
     * const candidatoes = await prisma.candidato.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const candidatoWithIdOnly = await prisma.candidato.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CandidatoFindManyArgs>(
      args?: SelectSubset<T, CandidatoFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Candidato>>, PrismaPromise<Array<CandidatoGetPayload<T>>>>

    /**
     * Create a Candidato.
     * @param {CandidatoCreateArgs} args - Arguments to create a Candidato.
     * @example
     * // Create one Candidato
     * const Candidato = await prisma.candidato.create({
     *   data: {
     *     // ... data to create a Candidato
     *   }
     * })
     * 
    **/
    create<T extends CandidatoCreateArgs>(
      args: SelectSubset<T, CandidatoCreateArgs>
    ): CheckSelect<T, Prisma__CandidatoClient<Candidato>, Prisma__CandidatoClient<CandidatoGetPayload<T>>>

    /**
     * Create many Candidatoes.
     *     @param {CandidatoCreateManyArgs} args - Arguments to create many Candidatoes.
     *     @example
     *     // Create many Candidatoes
     *     const candidato = await prisma.candidato.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CandidatoCreateManyArgs>(
      args?: SelectSubset<T, CandidatoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Candidato.
     * @param {CandidatoDeleteArgs} args - Arguments to delete one Candidato.
     * @example
     * // Delete one Candidato
     * const Candidato = await prisma.candidato.delete({
     *   where: {
     *     // ... filter to delete one Candidato
     *   }
     * })
     * 
    **/
    delete<T extends CandidatoDeleteArgs>(
      args: SelectSubset<T, CandidatoDeleteArgs>
    ): CheckSelect<T, Prisma__CandidatoClient<Candidato>, Prisma__CandidatoClient<CandidatoGetPayload<T>>>

    /**
     * Update one Candidato.
     * @param {CandidatoUpdateArgs} args - Arguments to update one Candidato.
     * @example
     * // Update one Candidato
     * const candidato = await prisma.candidato.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CandidatoUpdateArgs>(
      args: SelectSubset<T, CandidatoUpdateArgs>
    ): CheckSelect<T, Prisma__CandidatoClient<Candidato>, Prisma__CandidatoClient<CandidatoGetPayload<T>>>

    /**
     * Delete zero or more Candidatoes.
     * @param {CandidatoDeleteManyArgs} args - Arguments to filter Candidatoes to delete.
     * @example
     * // Delete a few Candidatoes
     * const { count } = await prisma.candidato.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CandidatoDeleteManyArgs>(
      args?: SelectSubset<T, CandidatoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Candidatoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Candidatoes
     * const candidato = await prisma.candidato.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CandidatoUpdateManyArgs>(
      args: SelectSubset<T, CandidatoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Candidato.
     * @param {CandidatoUpsertArgs} args - Arguments to update or create a Candidato.
     * @example
     * // Update or create a Candidato
     * const candidato = await prisma.candidato.upsert({
     *   create: {
     *     // ... data to create a Candidato
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Candidato we want to update
     *   }
     * })
    **/
    upsert<T extends CandidatoUpsertArgs>(
      args: SelectSubset<T, CandidatoUpsertArgs>
    ): CheckSelect<T, Prisma__CandidatoClient<Candidato>, Prisma__CandidatoClient<CandidatoGetPayload<T>>>

    /**
     * Find one Candidato that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {CandidatoFindUniqueOrThrowArgs} args - Arguments to find a Candidato
     * @example
     * // Get one Candidato
     * const candidato = await prisma.candidato.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CandidatoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CandidatoFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__CandidatoClient<Candidato>, Prisma__CandidatoClient<CandidatoGetPayload<T>>>

    /**
     * Find the first Candidato that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatoFindFirstOrThrowArgs} args - Arguments to find a Candidato
     * @example
     * // Get one Candidato
     * const candidato = await prisma.candidato.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CandidatoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CandidatoFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__CandidatoClient<Candidato>, Prisma__CandidatoClient<CandidatoGetPayload<T>>>

    /**
     * Count the number of Candidatoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatoCountArgs} args - Arguments to filter Candidatoes to count.
     * @example
     * // Count the number of Candidatoes
     * const count = await prisma.candidato.count({
     *   where: {
     *     // ... the filter for the Candidatoes we want to count
     *   }
     * })
    **/
    count<T extends CandidatoCountArgs>(
      args?: Subset<T, CandidatoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CandidatoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Candidato.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CandidatoAggregateArgs>(args: Subset<T, CandidatoAggregateArgs>): PrismaPromise<GetCandidatoAggregateType<T>>

    /**
     * Group by Candidato.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CandidatoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CandidatoGroupByArgs['orderBy'] }
        : { orderBy?: CandidatoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CandidatoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidatoGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Candidato.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CandidatoClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    partidoPolitico<T extends partidoPoliticoArgs = {}>(args?: Subset<T, partidoPoliticoArgs>): CheckSelect<T, Prisma__partidoPoliticoClient<partidoPolitico | Null>, Prisma__partidoPoliticoClient<partidoPoliticoGetPayload<T> | Null>>;

    region<T extends RegionArgs = {}>(args?: Subset<T, RegionArgs>): CheckSelect<T, Prisma__RegionClient<Region | Null>, Prisma__RegionClient<RegionGetPayload<T> | Null>>;

    sufragios<T extends SufragioFindManyArgs = {}>(args?: Subset<T, SufragioFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Sufragio>| Null>, PrismaPromise<Array<SufragioGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Candidato base type for findUnique actions
   */
  export type CandidatoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Candidato
     * 
    **/
    select?: CandidatoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidatoInclude | null
    /**
     * Filter, which Candidato to fetch.
     * 
    **/
    where: CandidatoWhereUniqueInput
  }

  /**
   * Candidato: findUnique
   */
  export interface CandidatoFindUniqueArgs extends CandidatoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Candidato base type for findFirst actions
   */
  export type CandidatoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Candidato
     * 
    **/
    select?: CandidatoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidatoInclude | null
    /**
     * Filter, which Candidato to fetch.
     * 
    **/
    where?: CandidatoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidatoes to fetch.
     * 
    **/
    orderBy?: Enumerable<CandidatoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Candidatoes.
     * 
    **/
    cursor?: CandidatoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidatoes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidatoes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Candidatoes.
     * 
    **/
    distinct?: Enumerable<CandidatoScalarFieldEnum>
  }

  /**
   * Candidato: findFirst
   */
  export interface CandidatoFindFirstArgs extends CandidatoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Candidato findMany
   */
  export type CandidatoFindManyArgs = {
    /**
     * Select specific fields to fetch from the Candidato
     * 
    **/
    select?: CandidatoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidatoInclude | null
    /**
     * Filter, which Candidatoes to fetch.
     * 
    **/
    where?: CandidatoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidatoes to fetch.
     * 
    **/
    orderBy?: Enumerable<CandidatoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Candidatoes.
     * 
    **/
    cursor?: CandidatoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidatoes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidatoes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CandidatoScalarFieldEnum>
  }


  /**
   * Candidato create
   */
  export type CandidatoCreateArgs = {
    /**
     * Select specific fields to fetch from the Candidato
     * 
    **/
    select?: CandidatoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidatoInclude | null
    /**
     * The data needed to create a Candidato.
     * 
    **/
    data: XOR<CandidatoCreateInput, CandidatoUncheckedCreateInput>
  }


  /**
   * Candidato createMany
   */
  export type CandidatoCreateManyArgs = {
    /**
     * The data used to create many Candidatoes.
     * 
    **/
    data: Enumerable<CandidatoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Candidato update
   */
  export type CandidatoUpdateArgs = {
    /**
     * Select specific fields to fetch from the Candidato
     * 
    **/
    select?: CandidatoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidatoInclude | null
    /**
     * The data needed to update a Candidato.
     * 
    **/
    data: XOR<CandidatoUpdateInput, CandidatoUncheckedUpdateInput>
    /**
     * Choose, which Candidato to update.
     * 
    **/
    where: CandidatoWhereUniqueInput
  }


  /**
   * Candidato updateMany
   */
  export type CandidatoUpdateManyArgs = {
    /**
     * The data used to update Candidatoes.
     * 
    **/
    data: XOR<CandidatoUpdateManyMutationInput, CandidatoUncheckedUpdateManyInput>
    /**
     * Filter which Candidatoes to update
     * 
    **/
    where?: CandidatoWhereInput
  }


  /**
   * Candidato upsert
   */
  export type CandidatoUpsertArgs = {
    /**
     * Select specific fields to fetch from the Candidato
     * 
    **/
    select?: CandidatoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidatoInclude | null
    /**
     * The filter to search for the Candidato to update in case it exists.
     * 
    **/
    where: CandidatoWhereUniqueInput
    /**
     * In case the Candidato found by the `where` argument doesn't exist, create a new Candidato with this data.
     * 
    **/
    create: XOR<CandidatoCreateInput, CandidatoUncheckedCreateInput>
    /**
     * In case the Candidato was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CandidatoUpdateInput, CandidatoUncheckedUpdateInput>
  }


  /**
   * Candidato delete
   */
  export type CandidatoDeleteArgs = {
    /**
     * Select specific fields to fetch from the Candidato
     * 
    **/
    select?: CandidatoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidatoInclude | null
    /**
     * Filter which Candidato to delete.
     * 
    **/
    where: CandidatoWhereUniqueInput
  }


  /**
   * Candidato deleteMany
   */
  export type CandidatoDeleteManyArgs = {
    /**
     * Filter which Candidatoes to delete
     * 
    **/
    where?: CandidatoWhereInput
  }


  /**
   * Candidato: findUniqueOrThrow
   */
  export type CandidatoFindUniqueOrThrowArgs = CandidatoFindUniqueArgsBase
      

  /**
   * Candidato: findFirstOrThrow
   */
  export type CandidatoFindFirstOrThrowArgs = CandidatoFindFirstArgsBase
      

  /**
   * Candidato without action
   */
  export type CandidatoArgs = {
    /**
     * Select specific fields to fetch from the Candidato
     * 
    **/
    select?: CandidatoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CandidatoInclude | null
  }



  /**
   * Model Sufragio
   */


  export type AggregateSufragio = {
    _count: SufragioCountAggregateOutputType | null
    _avg: SufragioAvgAggregateOutputType | null
    _sum: SufragioSumAggregateOutputType | null
    _min: SufragioMinAggregateOutputType | null
    _max: SufragioMaxAggregateOutputType | null
  }

  export type SufragioAvgAggregateOutputType = {
    id: number | null
    candidatoId: number | null
  }

  export type SufragioSumAggregateOutputType = {
    id: number | null
    candidatoId: number | null
  }

  export type SufragioMinAggregateOutputType = {
    id: number | null
    fecha: Date | null
    votanteId: string | null
    candidatoId: number | null
  }

  export type SufragioMaxAggregateOutputType = {
    id: number | null
    fecha: Date | null
    votanteId: string | null
    candidatoId: number | null
  }

  export type SufragioCountAggregateOutputType = {
    id: number
    fecha: number
    votanteId: number
    candidatoId: number
    _all: number
  }


  export type SufragioAvgAggregateInputType = {
    id?: true
    candidatoId?: true
  }

  export type SufragioSumAggregateInputType = {
    id?: true
    candidatoId?: true
  }

  export type SufragioMinAggregateInputType = {
    id?: true
    fecha?: true
    votanteId?: true
    candidatoId?: true
  }

  export type SufragioMaxAggregateInputType = {
    id?: true
    fecha?: true
    votanteId?: true
    candidatoId?: true
  }

  export type SufragioCountAggregateInputType = {
    id?: true
    fecha?: true
    votanteId?: true
    candidatoId?: true
    _all?: true
  }

  export type SufragioAggregateArgs = {
    /**
     * Filter which Sufragio to aggregate.
     * 
    **/
    where?: SufragioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sufragios to fetch.
     * 
    **/
    orderBy?: Enumerable<SufragioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SufragioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sufragios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sufragios.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sufragios
    **/
    _count?: true | SufragioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SufragioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SufragioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SufragioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SufragioMaxAggregateInputType
  }

  export type GetSufragioAggregateType<T extends SufragioAggregateArgs> = {
        [P in keyof T & keyof AggregateSufragio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSufragio[P]>
      : GetScalarType<T[P], AggregateSufragio[P]>
  }




  export type SufragioGroupByArgs = {
    where?: SufragioWhereInput
    orderBy?: Enumerable<SufragioOrderByWithAggregationInput>
    by: Array<SufragioScalarFieldEnum>
    having?: SufragioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SufragioCountAggregateInputType | true
    _avg?: SufragioAvgAggregateInputType
    _sum?: SufragioSumAggregateInputType
    _min?: SufragioMinAggregateInputType
    _max?: SufragioMaxAggregateInputType
  }


  export type SufragioGroupByOutputType = {
    id: number
    fecha: Date
    votanteId: string
    candidatoId: number
    _count: SufragioCountAggregateOutputType | null
    _avg: SufragioAvgAggregateOutputType | null
    _sum: SufragioSumAggregateOutputType | null
    _min: SufragioMinAggregateOutputType | null
    _max: SufragioMaxAggregateOutputType | null
  }

  type GetSufragioGroupByPayload<T extends SufragioGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SufragioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SufragioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SufragioGroupByOutputType[P]>
            : GetScalarType<T[P], SufragioGroupByOutputType[P]>
        }
      >
    >


  export type SufragioSelect = {
    id?: boolean
    fecha?: boolean
    votanteId?: boolean
    votante?: boolean | VotanteArgs
    candidatoId?: boolean
    candidate?: boolean | CandidatoArgs
  }

  export type SufragioInclude = {
    votante?: boolean | VotanteArgs
    candidate?: boolean | CandidatoArgs
  }

  export type SufragioGetPayload<
    S extends boolean | null | undefined | SufragioArgs,
    U = keyof S
      > = S extends true
        ? Sufragio
    : S extends undefined
    ? never
    : S extends SufragioArgs | SufragioFindManyArgs
    ?'include' extends U
    ? Sufragio  & {
    [P in TrueKeys<S['include']>]:
        P extends 'votante' ? VotanteGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'candidate' ? CandidatoGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'votante' ? VotanteGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'candidate' ? CandidatoGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Sufragio ? Sufragio[P] : never
  } 
    : Sufragio
  : Sufragio


  type SufragioCountArgs = Merge<
    Omit<SufragioFindManyArgs, 'select' | 'include'> & {
      select?: SufragioCountAggregateInputType | true
    }
  >

  export interface SufragioDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Sufragio that matches the filter.
     * @param {SufragioFindUniqueArgs} args - Arguments to find a Sufragio
     * @example
     * // Get one Sufragio
     * const sufragio = await prisma.sufragio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SufragioFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SufragioFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Sufragio'> extends True ? CheckSelect<T, Prisma__SufragioClient<Sufragio>, Prisma__SufragioClient<SufragioGetPayload<T>>> : CheckSelect<T, Prisma__SufragioClient<Sufragio | null, null>, Prisma__SufragioClient<SufragioGetPayload<T> | null, null>>

    /**
     * Find the first Sufragio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SufragioFindFirstArgs} args - Arguments to find a Sufragio
     * @example
     * // Get one Sufragio
     * const sufragio = await prisma.sufragio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SufragioFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SufragioFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Sufragio'> extends True ? CheckSelect<T, Prisma__SufragioClient<Sufragio>, Prisma__SufragioClient<SufragioGetPayload<T>>> : CheckSelect<T, Prisma__SufragioClient<Sufragio | null, null>, Prisma__SufragioClient<SufragioGetPayload<T> | null, null>>

    /**
     * Find zero or more Sufragios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SufragioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sufragios
     * const sufragios = await prisma.sufragio.findMany()
     * 
     * // Get first 10 Sufragios
     * const sufragios = await prisma.sufragio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sufragioWithIdOnly = await prisma.sufragio.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SufragioFindManyArgs>(
      args?: SelectSubset<T, SufragioFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Sufragio>>, PrismaPromise<Array<SufragioGetPayload<T>>>>

    /**
     * Create a Sufragio.
     * @param {SufragioCreateArgs} args - Arguments to create a Sufragio.
     * @example
     * // Create one Sufragio
     * const Sufragio = await prisma.sufragio.create({
     *   data: {
     *     // ... data to create a Sufragio
     *   }
     * })
     * 
    **/
    create<T extends SufragioCreateArgs>(
      args: SelectSubset<T, SufragioCreateArgs>
    ): CheckSelect<T, Prisma__SufragioClient<Sufragio>, Prisma__SufragioClient<SufragioGetPayload<T>>>

    /**
     * Create many Sufragios.
     *     @param {SufragioCreateManyArgs} args - Arguments to create many Sufragios.
     *     @example
     *     // Create many Sufragios
     *     const sufragio = await prisma.sufragio.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SufragioCreateManyArgs>(
      args?: SelectSubset<T, SufragioCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Sufragio.
     * @param {SufragioDeleteArgs} args - Arguments to delete one Sufragio.
     * @example
     * // Delete one Sufragio
     * const Sufragio = await prisma.sufragio.delete({
     *   where: {
     *     // ... filter to delete one Sufragio
     *   }
     * })
     * 
    **/
    delete<T extends SufragioDeleteArgs>(
      args: SelectSubset<T, SufragioDeleteArgs>
    ): CheckSelect<T, Prisma__SufragioClient<Sufragio>, Prisma__SufragioClient<SufragioGetPayload<T>>>

    /**
     * Update one Sufragio.
     * @param {SufragioUpdateArgs} args - Arguments to update one Sufragio.
     * @example
     * // Update one Sufragio
     * const sufragio = await prisma.sufragio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SufragioUpdateArgs>(
      args: SelectSubset<T, SufragioUpdateArgs>
    ): CheckSelect<T, Prisma__SufragioClient<Sufragio>, Prisma__SufragioClient<SufragioGetPayload<T>>>

    /**
     * Delete zero or more Sufragios.
     * @param {SufragioDeleteManyArgs} args - Arguments to filter Sufragios to delete.
     * @example
     * // Delete a few Sufragios
     * const { count } = await prisma.sufragio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SufragioDeleteManyArgs>(
      args?: SelectSubset<T, SufragioDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sufragios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SufragioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sufragios
     * const sufragio = await prisma.sufragio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SufragioUpdateManyArgs>(
      args: SelectSubset<T, SufragioUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Sufragio.
     * @param {SufragioUpsertArgs} args - Arguments to update or create a Sufragio.
     * @example
     * // Update or create a Sufragio
     * const sufragio = await prisma.sufragio.upsert({
     *   create: {
     *     // ... data to create a Sufragio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sufragio we want to update
     *   }
     * })
    **/
    upsert<T extends SufragioUpsertArgs>(
      args: SelectSubset<T, SufragioUpsertArgs>
    ): CheckSelect<T, Prisma__SufragioClient<Sufragio>, Prisma__SufragioClient<SufragioGetPayload<T>>>

    /**
     * Find one Sufragio that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {SufragioFindUniqueOrThrowArgs} args - Arguments to find a Sufragio
     * @example
     * // Get one Sufragio
     * const sufragio = await prisma.sufragio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SufragioFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SufragioFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__SufragioClient<Sufragio>, Prisma__SufragioClient<SufragioGetPayload<T>>>

    /**
     * Find the first Sufragio that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SufragioFindFirstOrThrowArgs} args - Arguments to find a Sufragio
     * @example
     * // Get one Sufragio
     * const sufragio = await prisma.sufragio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SufragioFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SufragioFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__SufragioClient<Sufragio>, Prisma__SufragioClient<SufragioGetPayload<T>>>

    /**
     * Count the number of Sufragios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SufragioCountArgs} args - Arguments to filter Sufragios to count.
     * @example
     * // Count the number of Sufragios
     * const count = await prisma.sufragio.count({
     *   where: {
     *     // ... the filter for the Sufragios we want to count
     *   }
     * })
    **/
    count<T extends SufragioCountArgs>(
      args?: Subset<T, SufragioCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SufragioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sufragio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SufragioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SufragioAggregateArgs>(args: Subset<T, SufragioAggregateArgs>): PrismaPromise<GetSufragioAggregateType<T>>

    /**
     * Group by Sufragio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SufragioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SufragioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SufragioGroupByArgs['orderBy'] }
        : { orderBy?: SufragioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SufragioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSufragioGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Sufragio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SufragioClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    votante<T extends VotanteArgs = {}>(args?: Subset<T, VotanteArgs>): CheckSelect<T, Prisma__VotanteClient<Votante | Null>, Prisma__VotanteClient<VotanteGetPayload<T> | Null>>;

    candidate<T extends CandidatoArgs = {}>(args?: Subset<T, CandidatoArgs>): CheckSelect<T, Prisma__CandidatoClient<Candidato | Null>, Prisma__CandidatoClient<CandidatoGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Sufragio base type for findUnique actions
   */
  export type SufragioFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Sufragio
     * 
    **/
    select?: SufragioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SufragioInclude | null
    /**
     * Filter, which Sufragio to fetch.
     * 
    **/
    where: SufragioWhereUniqueInput
  }

  /**
   * Sufragio: findUnique
   */
  export interface SufragioFindUniqueArgs extends SufragioFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Sufragio base type for findFirst actions
   */
  export type SufragioFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Sufragio
     * 
    **/
    select?: SufragioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SufragioInclude | null
    /**
     * Filter, which Sufragio to fetch.
     * 
    **/
    where?: SufragioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sufragios to fetch.
     * 
    **/
    orderBy?: Enumerable<SufragioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sufragios.
     * 
    **/
    cursor?: SufragioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sufragios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sufragios.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sufragios.
     * 
    **/
    distinct?: Enumerable<SufragioScalarFieldEnum>
  }

  /**
   * Sufragio: findFirst
   */
  export interface SufragioFindFirstArgs extends SufragioFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Sufragio findMany
   */
  export type SufragioFindManyArgs = {
    /**
     * Select specific fields to fetch from the Sufragio
     * 
    **/
    select?: SufragioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SufragioInclude | null
    /**
     * Filter, which Sufragios to fetch.
     * 
    **/
    where?: SufragioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sufragios to fetch.
     * 
    **/
    orderBy?: Enumerable<SufragioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sufragios.
     * 
    **/
    cursor?: SufragioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sufragios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sufragios.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SufragioScalarFieldEnum>
  }


  /**
   * Sufragio create
   */
  export type SufragioCreateArgs = {
    /**
     * Select specific fields to fetch from the Sufragio
     * 
    **/
    select?: SufragioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SufragioInclude | null
    /**
     * The data needed to create a Sufragio.
     * 
    **/
    data: XOR<SufragioCreateInput, SufragioUncheckedCreateInput>
  }


  /**
   * Sufragio createMany
   */
  export type SufragioCreateManyArgs = {
    /**
     * The data used to create many Sufragios.
     * 
    **/
    data: Enumerable<SufragioCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Sufragio update
   */
  export type SufragioUpdateArgs = {
    /**
     * Select specific fields to fetch from the Sufragio
     * 
    **/
    select?: SufragioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SufragioInclude | null
    /**
     * The data needed to update a Sufragio.
     * 
    **/
    data: XOR<SufragioUpdateInput, SufragioUncheckedUpdateInput>
    /**
     * Choose, which Sufragio to update.
     * 
    **/
    where: SufragioWhereUniqueInput
  }


  /**
   * Sufragio updateMany
   */
  export type SufragioUpdateManyArgs = {
    /**
     * The data used to update Sufragios.
     * 
    **/
    data: XOR<SufragioUpdateManyMutationInput, SufragioUncheckedUpdateManyInput>
    /**
     * Filter which Sufragios to update
     * 
    **/
    where?: SufragioWhereInput
  }


  /**
   * Sufragio upsert
   */
  export type SufragioUpsertArgs = {
    /**
     * Select specific fields to fetch from the Sufragio
     * 
    **/
    select?: SufragioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SufragioInclude | null
    /**
     * The filter to search for the Sufragio to update in case it exists.
     * 
    **/
    where: SufragioWhereUniqueInput
    /**
     * In case the Sufragio found by the `where` argument doesn't exist, create a new Sufragio with this data.
     * 
    **/
    create: XOR<SufragioCreateInput, SufragioUncheckedCreateInput>
    /**
     * In case the Sufragio was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SufragioUpdateInput, SufragioUncheckedUpdateInput>
  }


  /**
   * Sufragio delete
   */
  export type SufragioDeleteArgs = {
    /**
     * Select specific fields to fetch from the Sufragio
     * 
    **/
    select?: SufragioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SufragioInclude | null
    /**
     * Filter which Sufragio to delete.
     * 
    **/
    where: SufragioWhereUniqueInput
  }


  /**
   * Sufragio deleteMany
   */
  export type SufragioDeleteManyArgs = {
    /**
     * Filter which Sufragios to delete
     * 
    **/
    where?: SufragioWhereInput
  }


  /**
   * Sufragio: findUniqueOrThrow
   */
  export type SufragioFindUniqueOrThrowArgs = SufragioFindUniqueArgsBase
      

  /**
   * Sufragio: findFirstOrThrow
   */
  export type SufragioFindFirstOrThrowArgs = SufragioFindFirstArgsBase
      

  /**
   * Sufragio without action
   */
  export type SufragioArgs = {
    /**
     * Select specific fields to fetch from the Sufragio
     * 
    **/
    select?: SufragioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SufragioInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CandidatoScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    apellido: 'apellido',
    partidoPoliticoId: 'partidoPoliticoId',
    regionId: 'regionId'
  };

  export type CandidatoScalarFieldEnum = (typeof CandidatoScalarFieldEnum)[keyof typeof CandidatoScalarFieldEnum]


  export const PartidoPoliticoScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    logo: 'logo'
  };

  export type PartidoPoliticoScalarFieldEnum = (typeof PartidoPoliticoScalarFieldEnum)[keyof typeof PartidoPoliticoScalarFieldEnum]


  export const RegionScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre'
  };

  export type RegionScalarFieldEnum = (typeof RegionScalarFieldEnum)[keyof typeof RegionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const SufragioScalarFieldEnum: {
    id: 'id',
    fecha: 'fecha',
    votanteId: 'votanteId',
    candidatoId: 'candidatoId'
  };

  export type SufragioScalarFieldEnum = (typeof SufragioScalarFieldEnum)[keyof typeof SufragioScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const VotanteScalarFieldEnum: {
    dni: 'dni',
    nombre: 'nombre',
    apellido: 'apellido',
    regionId: 'regionId'
  };

  export type VotanteScalarFieldEnum = (typeof VotanteScalarFieldEnum)[keyof typeof VotanteScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type partidoPoliticoWhereInput = {
    AND?: Enumerable<partidoPoliticoWhereInput>
    OR?: Enumerable<partidoPoliticoWhereInput>
    NOT?: Enumerable<partidoPoliticoWhereInput>
    id?: IntFilter | number
    nombre?: StringFilter | string
    logo?: StringFilter | string
    candidatos?: CandidatoListRelationFilter
  }

  export type partidoPoliticoOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    logo?: SortOrder
    candidatos?: CandidatoOrderByRelationAggregateInput
  }

  export type partidoPoliticoWhereUniqueInput = {
    id?: number
    nombre?: string
  }

  export type partidoPoliticoOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    logo?: SortOrder
    _count?: partidoPoliticoCountOrderByAggregateInput
    _avg?: partidoPoliticoAvgOrderByAggregateInput
    _max?: partidoPoliticoMaxOrderByAggregateInput
    _min?: partidoPoliticoMinOrderByAggregateInput
    _sum?: partidoPoliticoSumOrderByAggregateInput
  }

  export type partidoPoliticoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<partidoPoliticoScalarWhereWithAggregatesInput>
    OR?: Enumerable<partidoPoliticoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<partidoPoliticoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nombre?: StringWithAggregatesFilter | string
    logo?: StringWithAggregatesFilter | string
  }

  export type RegionWhereInput = {
    AND?: Enumerable<RegionWhereInput>
    OR?: Enumerable<RegionWhereInput>
    NOT?: Enumerable<RegionWhereInput>
    id?: IntFilter | number
    nombre?: StringFilter | string
    candidatos?: CandidatoListRelationFilter
    votantes?: VotanteListRelationFilter
  }

  export type RegionOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    candidatos?: CandidatoOrderByRelationAggregateInput
    votantes?: VotanteOrderByRelationAggregateInput
  }

  export type RegionWhereUniqueInput = {
    id?: number
    nombre?: string
  }

  export type RegionOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    _count?: RegionCountOrderByAggregateInput
    _avg?: RegionAvgOrderByAggregateInput
    _max?: RegionMaxOrderByAggregateInput
    _min?: RegionMinOrderByAggregateInput
    _sum?: RegionSumOrderByAggregateInput
  }

  export type RegionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RegionScalarWhereWithAggregatesInput>
    OR?: Enumerable<RegionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RegionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nombre?: StringWithAggregatesFilter | string
  }

  export type VotanteWhereInput = {
    AND?: Enumerable<VotanteWhereInput>
    OR?: Enumerable<VotanteWhereInput>
    NOT?: Enumerable<VotanteWhereInput>
    dni?: StringFilter | string
    nombre?: StringFilter | string
    apellido?: StringFilter | string
    regionId?: IntFilter | number
    region?: XOR<RegionRelationFilter, RegionWhereInput>
    sufragios?: SufragioListRelationFilter
  }

  export type VotanteOrderByWithRelationInput = {
    dni?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    regionId?: SortOrder
    region?: RegionOrderByWithRelationInput
    sufragios?: SufragioOrderByRelationAggregateInput
  }

  export type VotanteWhereUniqueInput = {
    dni?: string
  }

  export type VotanteOrderByWithAggregationInput = {
    dni?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    regionId?: SortOrder
    _count?: VotanteCountOrderByAggregateInput
    _avg?: VotanteAvgOrderByAggregateInput
    _max?: VotanteMaxOrderByAggregateInput
    _min?: VotanteMinOrderByAggregateInput
    _sum?: VotanteSumOrderByAggregateInput
  }

  export type VotanteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VotanteScalarWhereWithAggregatesInput>
    OR?: Enumerable<VotanteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VotanteScalarWhereWithAggregatesInput>
    dni?: StringWithAggregatesFilter | string
    nombre?: StringWithAggregatesFilter | string
    apellido?: StringWithAggregatesFilter | string
    regionId?: IntWithAggregatesFilter | number
  }

  export type CandidatoWhereInput = {
    AND?: Enumerable<CandidatoWhereInput>
    OR?: Enumerable<CandidatoWhereInput>
    NOT?: Enumerable<CandidatoWhereInput>
    id?: IntFilter | number
    nombre?: StringFilter | string
    apellido?: StringFilter | string
    partidoPoliticoId?: IntFilter | number
    partidoPolitico?: XOR<PartidoPoliticoRelationFilter, partidoPoliticoWhereInput>
    regionId?: IntFilter | number
    region?: XOR<RegionRelationFilter, RegionWhereInput>
    sufragios?: SufragioListRelationFilter
  }

  export type CandidatoOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    partidoPoliticoId?: SortOrder
    partidoPolitico?: partidoPoliticoOrderByWithRelationInput
    regionId?: SortOrder
    region?: RegionOrderByWithRelationInput
    sufragios?: SufragioOrderByRelationAggregateInput
  }

  export type CandidatoWhereUniqueInput = {
    id?: number
  }

  export type CandidatoOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    partidoPoliticoId?: SortOrder
    regionId?: SortOrder
    _count?: CandidatoCountOrderByAggregateInput
    _avg?: CandidatoAvgOrderByAggregateInput
    _max?: CandidatoMaxOrderByAggregateInput
    _min?: CandidatoMinOrderByAggregateInput
    _sum?: CandidatoSumOrderByAggregateInput
  }

  export type CandidatoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CandidatoScalarWhereWithAggregatesInput>
    OR?: Enumerable<CandidatoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CandidatoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nombre?: StringWithAggregatesFilter | string
    apellido?: StringWithAggregatesFilter | string
    partidoPoliticoId?: IntWithAggregatesFilter | number
    regionId?: IntWithAggregatesFilter | number
  }

  export type SufragioWhereInput = {
    AND?: Enumerable<SufragioWhereInput>
    OR?: Enumerable<SufragioWhereInput>
    NOT?: Enumerable<SufragioWhereInput>
    id?: IntFilter | number
    fecha?: DateTimeFilter | Date | string
    votanteId?: StringFilter | string
    votante?: XOR<VotanteRelationFilter, VotanteWhereInput>
    candidatoId?: IntFilter | number
    candidate?: XOR<CandidatoRelationFilter, CandidatoWhereInput>
  }

  export type SufragioOrderByWithRelationInput = {
    id?: SortOrder
    fecha?: SortOrder
    votanteId?: SortOrder
    votante?: VotanteOrderByWithRelationInput
    candidatoId?: SortOrder
    candidate?: CandidatoOrderByWithRelationInput
  }

  export type SufragioWhereUniqueInput = {
    id?: number
    votanteId?: string
  }

  export type SufragioOrderByWithAggregationInput = {
    id?: SortOrder
    fecha?: SortOrder
    votanteId?: SortOrder
    candidatoId?: SortOrder
    _count?: SufragioCountOrderByAggregateInput
    _avg?: SufragioAvgOrderByAggregateInput
    _max?: SufragioMaxOrderByAggregateInput
    _min?: SufragioMinOrderByAggregateInput
    _sum?: SufragioSumOrderByAggregateInput
  }

  export type SufragioScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SufragioScalarWhereWithAggregatesInput>
    OR?: Enumerable<SufragioScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SufragioScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    fecha?: DateTimeWithAggregatesFilter | Date | string
    votanteId?: StringWithAggregatesFilter | string
    candidatoId?: IntWithAggregatesFilter | number
  }

  export type partidoPoliticoCreateInput = {
    nombre: string
    logo: string
    candidatos?: CandidatoCreateNestedManyWithoutPartidoPoliticoInput
  }

  export type partidoPoliticoUncheckedCreateInput = {
    id?: number
    nombre: string
    logo: string
    candidatos?: CandidatoUncheckedCreateNestedManyWithoutPartidoPoliticoInput
  }

  export type partidoPoliticoUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    candidatos?: CandidatoUpdateManyWithoutPartidoPoliticoNestedInput
  }

  export type partidoPoliticoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    candidatos?: CandidatoUncheckedUpdateManyWithoutPartidoPoliticoNestedInput
  }

  export type partidoPoliticoCreateManyInput = {
    id?: number
    nombre: string
    logo: string
  }

  export type partidoPoliticoUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
  }

  export type partidoPoliticoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
  }

  export type RegionCreateInput = {
    nombre: string
    candidatos?: CandidatoCreateNestedManyWithoutRegionInput
    votantes?: VotanteCreateNestedManyWithoutRegionInput
  }

  export type RegionUncheckedCreateInput = {
    id?: number
    nombre: string
    candidatos?: CandidatoUncheckedCreateNestedManyWithoutRegionInput
    votantes?: VotanteUncheckedCreateNestedManyWithoutRegionInput
  }

  export type RegionUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    candidatos?: CandidatoUpdateManyWithoutRegionNestedInput
    votantes?: VotanteUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    candidatos?: CandidatoUncheckedUpdateManyWithoutRegionNestedInput
    votantes?: VotanteUncheckedUpdateManyWithoutRegionNestedInput
  }

  export type RegionCreateManyInput = {
    id?: number
    nombre: string
  }

  export type RegionUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type RegionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type VotanteCreateInput = {
    dni: string
    nombre: string
    apellido: string
    region: RegionCreateNestedOneWithoutVotantesInput
    sufragios?: SufragioCreateNestedManyWithoutVotanteInput
  }

  export type VotanteUncheckedCreateInput = {
    dni: string
    nombre: string
    apellido: string
    regionId: number
    sufragios?: SufragioUncheckedCreateNestedManyWithoutVotanteInput
  }

  export type VotanteUpdateInput = {
    dni?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    region?: RegionUpdateOneRequiredWithoutVotantesNestedInput
    sufragios?: SufragioUpdateManyWithoutVotanteNestedInput
  }

  export type VotanteUncheckedUpdateInput = {
    dni?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    regionId?: IntFieldUpdateOperationsInput | number
    sufragios?: SufragioUncheckedUpdateManyWithoutVotanteNestedInput
  }

  export type VotanteCreateManyInput = {
    dni: string
    nombre: string
    apellido: string
    regionId: number
  }

  export type VotanteUpdateManyMutationInput = {
    dni?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
  }

  export type VotanteUncheckedUpdateManyInput = {
    dni?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    regionId?: IntFieldUpdateOperationsInput | number
  }

  export type CandidatoCreateInput = {
    nombre: string
    apellido: string
    partidoPolitico: partidoPoliticoCreateNestedOneWithoutCandidatosInput
    region: RegionCreateNestedOneWithoutCandidatosInput
    sufragios?: SufragioCreateNestedManyWithoutCandidateInput
  }

  export type CandidatoUncheckedCreateInput = {
    id?: number
    nombre: string
    apellido: string
    partidoPoliticoId: number
    regionId: number
    sufragios?: SufragioUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidatoUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    partidoPolitico?: partidoPoliticoUpdateOneRequiredWithoutCandidatosNestedInput
    region?: RegionUpdateOneRequiredWithoutCandidatosNestedInput
    sufragios?: SufragioUpdateManyWithoutCandidateNestedInput
  }

  export type CandidatoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    partidoPoliticoId?: IntFieldUpdateOperationsInput | number
    regionId?: IntFieldUpdateOperationsInput | number
    sufragios?: SufragioUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type CandidatoCreateManyInput = {
    id?: number
    nombre: string
    apellido: string
    partidoPoliticoId: number
    regionId: number
  }

  export type CandidatoUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
  }

  export type CandidatoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    partidoPoliticoId?: IntFieldUpdateOperationsInput | number
    regionId?: IntFieldUpdateOperationsInput | number
  }

  export type SufragioCreateInput = {
    fecha?: Date | string
    votante: VotanteCreateNestedOneWithoutSufragiosInput
    candidate: CandidatoCreateNestedOneWithoutSufragiosInput
  }

  export type SufragioUncheckedCreateInput = {
    id?: number
    fecha?: Date | string
    votanteId: string
    candidatoId: number
  }

  export type SufragioUpdateInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    votante?: VotanteUpdateOneRequiredWithoutSufragiosNestedInput
    candidate?: CandidatoUpdateOneRequiredWithoutSufragiosNestedInput
  }

  export type SufragioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    votanteId?: StringFieldUpdateOperationsInput | string
    candidatoId?: IntFieldUpdateOperationsInput | number
  }

  export type SufragioCreateManyInput = {
    id?: number
    fecha?: Date | string
    votanteId: string
    candidatoId: number
  }

  export type SufragioUpdateManyMutationInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SufragioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    votanteId?: StringFieldUpdateOperationsInput | string
    candidatoId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type CandidatoListRelationFilter = {
    every?: CandidatoWhereInput
    some?: CandidatoWhereInput
    none?: CandidatoWhereInput
  }

  export type CandidatoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type partidoPoliticoCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    logo?: SortOrder
  }

  export type partidoPoliticoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type partidoPoliticoMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    logo?: SortOrder
  }

  export type partidoPoliticoMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    logo?: SortOrder
  }

  export type partidoPoliticoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type VotanteListRelationFilter = {
    every?: VotanteWhereInput
    some?: VotanteWhereInput
    none?: VotanteWhereInput
  }

  export type VotanteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RegionCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type RegionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RegionMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type RegionMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type RegionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RegionRelationFilter = {
    is?: RegionWhereInput
    isNot?: RegionWhereInput
  }

  export type SufragioListRelationFilter = {
    every?: SufragioWhereInput
    some?: SufragioWhereInput
    none?: SufragioWhereInput
  }

  export type SufragioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VotanteCountOrderByAggregateInput = {
    dni?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    regionId?: SortOrder
  }

  export type VotanteAvgOrderByAggregateInput = {
    regionId?: SortOrder
  }

  export type VotanteMaxOrderByAggregateInput = {
    dni?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    regionId?: SortOrder
  }

  export type VotanteMinOrderByAggregateInput = {
    dni?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    regionId?: SortOrder
  }

  export type VotanteSumOrderByAggregateInput = {
    regionId?: SortOrder
  }

  export type PartidoPoliticoRelationFilter = {
    is?: partidoPoliticoWhereInput
    isNot?: partidoPoliticoWhereInput
  }

  export type CandidatoCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    partidoPoliticoId?: SortOrder
    regionId?: SortOrder
  }

  export type CandidatoAvgOrderByAggregateInput = {
    id?: SortOrder
    partidoPoliticoId?: SortOrder
    regionId?: SortOrder
  }

  export type CandidatoMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    partidoPoliticoId?: SortOrder
    regionId?: SortOrder
  }

  export type CandidatoMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    partidoPoliticoId?: SortOrder
    regionId?: SortOrder
  }

  export type CandidatoSumOrderByAggregateInput = {
    id?: SortOrder
    partidoPoliticoId?: SortOrder
    regionId?: SortOrder
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type VotanteRelationFilter = {
    is?: VotanteWhereInput
    isNot?: VotanteWhereInput
  }

  export type CandidatoRelationFilter = {
    is?: CandidatoWhereInput
    isNot?: CandidatoWhereInput
  }

  export type SufragioCountOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    votanteId?: SortOrder
    candidatoId?: SortOrder
  }

  export type SufragioAvgOrderByAggregateInput = {
    id?: SortOrder
    candidatoId?: SortOrder
  }

  export type SufragioMaxOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    votanteId?: SortOrder
    candidatoId?: SortOrder
  }

  export type SufragioMinOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    votanteId?: SortOrder
    candidatoId?: SortOrder
  }

  export type SufragioSumOrderByAggregateInput = {
    id?: SortOrder
    candidatoId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type CandidatoCreateNestedManyWithoutPartidoPoliticoInput = {
    create?: XOR<Enumerable<CandidatoCreateWithoutPartidoPoliticoInput>, Enumerable<CandidatoUncheckedCreateWithoutPartidoPoliticoInput>>
    connectOrCreate?: Enumerable<CandidatoCreateOrConnectWithoutPartidoPoliticoInput>
    createMany?: CandidatoCreateManyPartidoPoliticoInputEnvelope
    connect?: Enumerable<CandidatoWhereUniqueInput>
  }

  export type CandidatoUncheckedCreateNestedManyWithoutPartidoPoliticoInput = {
    create?: XOR<Enumerable<CandidatoCreateWithoutPartidoPoliticoInput>, Enumerable<CandidatoUncheckedCreateWithoutPartidoPoliticoInput>>
    connectOrCreate?: Enumerable<CandidatoCreateOrConnectWithoutPartidoPoliticoInput>
    createMany?: CandidatoCreateManyPartidoPoliticoInputEnvelope
    connect?: Enumerable<CandidatoWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type CandidatoUpdateManyWithoutPartidoPoliticoNestedInput = {
    create?: XOR<Enumerable<CandidatoCreateWithoutPartidoPoliticoInput>, Enumerable<CandidatoUncheckedCreateWithoutPartidoPoliticoInput>>
    connectOrCreate?: Enumerable<CandidatoCreateOrConnectWithoutPartidoPoliticoInput>
    upsert?: Enumerable<CandidatoUpsertWithWhereUniqueWithoutPartidoPoliticoInput>
    createMany?: CandidatoCreateManyPartidoPoliticoInputEnvelope
    set?: Enumerable<CandidatoWhereUniqueInput>
    disconnect?: Enumerable<CandidatoWhereUniqueInput>
    delete?: Enumerable<CandidatoWhereUniqueInput>
    connect?: Enumerable<CandidatoWhereUniqueInput>
    update?: Enumerable<CandidatoUpdateWithWhereUniqueWithoutPartidoPoliticoInput>
    updateMany?: Enumerable<CandidatoUpdateManyWithWhereWithoutPartidoPoliticoInput>
    deleteMany?: Enumerable<CandidatoScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CandidatoUncheckedUpdateManyWithoutPartidoPoliticoNestedInput = {
    create?: XOR<Enumerable<CandidatoCreateWithoutPartidoPoliticoInput>, Enumerable<CandidatoUncheckedCreateWithoutPartidoPoliticoInput>>
    connectOrCreate?: Enumerable<CandidatoCreateOrConnectWithoutPartidoPoliticoInput>
    upsert?: Enumerable<CandidatoUpsertWithWhereUniqueWithoutPartidoPoliticoInput>
    createMany?: CandidatoCreateManyPartidoPoliticoInputEnvelope
    set?: Enumerable<CandidatoWhereUniqueInput>
    disconnect?: Enumerable<CandidatoWhereUniqueInput>
    delete?: Enumerable<CandidatoWhereUniqueInput>
    connect?: Enumerable<CandidatoWhereUniqueInput>
    update?: Enumerable<CandidatoUpdateWithWhereUniqueWithoutPartidoPoliticoInput>
    updateMany?: Enumerable<CandidatoUpdateManyWithWhereWithoutPartidoPoliticoInput>
    deleteMany?: Enumerable<CandidatoScalarWhereInput>
  }

  export type CandidatoCreateNestedManyWithoutRegionInput = {
    create?: XOR<Enumerable<CandidatoCreateWithoutRegionInput>, Enumerable<CandidatoUncheckedCreateWithoutRegionInput>>
    connectOrCreate?: Enumerable<CandidatoCreateOrConnectWithoutRegionInput>
    createMany?: CandidatoCreateManyRegionInputEnvelope
    connect?: Enumerable<CandidatoWhereUniqueInput>
  }

  export type VotanteCreateNestedManyWithoutRegionInput = {
    create?: XOR<Enumerable<VotanteCreateWithoutRegionInput>, Enumerable<VotanteUncheckedCreateWithoutRegionInput>>
    connectOrCreate?: Enumerable<VotanteCreateOrConnectWithoutRegionInput>
    createMany?: VotanteCreateManyRegionInputEnvelope
    connect?: Enumerable<VotanteWhereUniqueInput>
  }

  export type CandidatoUncheckedCreateNestedManyWithoutRegionInput = {
    create?: XOR<Enumerable<CandidatoCreateWithoutRegionInput>, Enumerable<CandidatoUncheckedCreateWithoutRegionInput>>
    connectOrCreate?: Enumerable<CandidatoCreateOrConnectWithoutRegionInput>
    createMany?: CandidatoCreateManyRegionInputEnvelope
    connect?: Enumerable<CandidatoWhereUniqueInput>
  }

  export type VotanteUncheckedCreateNestedManyWithoutRegionInput = {
    create?: XOR<Enumerable<VotanteCreateWithoutRegionInput>, Enumerable<VotanteUncheckedCreateWithoutRegionInput>>
    connectOrCreate?: Enumerable<VotanteCreateOrConnectWithoutRegionInput>
    createMany?: VotanteCreateManyRegionInputEnvelope
    connect?: Enumerable<VotanteWhereUniqueInput>
  }

  export type CandidatoUpdateManyWithoutRegionNestedInput = {
    create?: XOR<Enumerable<CandidatoCreateWithoutRegionInput>, Enumerable<CandidatoUncheckedCreateWithoutRegionInput>>
    connectOrCreate?: Enumerable<CandidatoCreateOrConnectWithoutRegionInput>
    upsert?: Enumerable<CandidatoUpsertWithWhereUniqueWithoutRegionInput>
    createMany?: CandidatoCreateManyRegionInputEnvelope
    set?: Enumerable<CandidatoWhereUniqueInput>
    disconnect?: Enumerable<CandidatoWhereUniqueInput>
    delete?: Enumerable<CandidatoWhereUniqueInput>
    connect?: Enumerable<CandidatoWhereUniqueInput>
    update?: Enumerable<CandidatoUpdateWithWhereUniqueWithoutRegionInput>
    updateMany?: Enumerable<CandidatoUpdateManyWithWhereWithoutRegionInput>
    deleteMany?: Enumerable<CandidatoScalarWhereInput>
  }

  export type VotanteUpdateManyWithoutRegionNestedInput = {
    create?: XOR<Enumerable<VotanteCreateWithoutRegionInput>, Enumerable<VotanteUncheckedCreateWithoutRegionInput>>
    connectOrCreate?: Enumerable<VotanteCreateOrConnectWithoutRegionInput>
    upsert?: Enumerable<VotanteUpsertWithWhereUniqueWithoutRegionInput>
    createMany?: VotanteCreateManyRegionInputEnvelope
    set?: Enumerable<VotanteWhereUniqueInput>
    disconnect?: Enumerable<VotanteWhereUniqueInput>
    delete?: Enumerable<VotanteWhereUniqueInput>
    connect?: Enumerable<VotanteWhereUniqueInput>
    update?: Enumerable<VotanteUpdateWithWhereUniqueWithoutRegionInput>
    updateMany?: Enumerable<VotanteUpdateManyWithWhereWithoutRegionInput>
    deleteMany?: Enumerable<VotanteScalarWhereInput>
  }

  export type CandidatoUncheckedUpdateManyWithoutRegionNestedInput = {
    create?: XOR<Enumerable<CandidatoCreateWithoutRegionInput>, Enumerable<CandidatoUncheckedCreateWithoutRegionInput>>
    connectOrCreate?: Enumerable<CandidatoCreateOrConnectWithoutRegionInput>
    upsert?: Enumerable<CandidatoUpsertWithWhereUniqueWithoutRegionInput>
    createMany?: CandidatoCreateManyRegionInputEnvelope
    set?: Enumerable<CandidatoWhereUniqueInput>
    disconnect?: Enumerable<CandidatoWhereUniqueInput>
    delete?: Enumerable<CandidatoWhereUniqueInput>
    connect?: Enumerable<CandidatoWhereUniqueInput>
    update?: Enumerable<CandidatoUpdateWithWhereUniqueWithoutRegionInput>
    updateMany?: Enumerable<CandidatoUpdateManyWithWhereWithoutRegionInput>
    deleteMany?: Enumerable<CandidatoScalarWhereInput>
  }

  export type VotanteUncheckedUpdateManyWithoutRegionNestedInput = {
    create?: XOR<Enumerable<VotanteCreateWithoutRegionInput>, Enumerable<VotanteUncheckedCreateWithoutRegionInput>>
    connectOrCreate?: Enumerable<VotanteCreateOrConnectWithoutRegionInput>
    upsert?: Enumerable<VotanteUpsertWithWhereUniqueWithoutRegionInput>
    createMany?: VotanteCreateManyRegionInputEnvelope
    set?: Enumerable<VotanteWhereUniqueInput>
    disconnect?: Enumerable<VotanteWhereUniqueInput>
    delete?: Enumerable<VotanteWhereUniqueInput>
    connect?: Enumerable<VotanteWhereUniqueInput>
    update?: Enumerable<VotanteUpdateWithWhereUniqueWithoutRegionInput>
    updateMany?: Enumerable<VotanteUpdateManyWithWhereWithoutRegionInput>
    deleteMany?: Enumerable<VotanteScalarWhereInput>
  }

  export type RegionCreateNestedOneWithoutVotantesInput = {
    create?: XOR<RegionCreateWithoutVotantesInput, RegionUncheckedCreateWithoutVotantesInput>
    connectOrCreate?: RegionCreateOrConnectWithoutVotantesInput
    connect?: RegionWhereUniqueInput
  }

  export type SufragioCreateNestedManyWithoutVotanteInput = {
    create?: XOR<Enumerable<SufragioCreateWithoutVotanteInput>, Enumerable<SufragioUncheckedCreateWithoutVotanteInput>>
    connectOrCreate?: Enumerable<SufragioCreateOrConnectWithoutVotanteInput>
    createMany?: SufragioCreateManyVotanteInputEnvelope
    connect?: Enumerable<SufragioWhereUniqueInput>
  }

  export type SufragioUncheckedCreateNestedManyWithoutVotanteInput = {
    create?: XOR<Enumerable<SufragioCreateWithoutVotanteInput>, Enumerable<SufragioUncheckedCreateWithoutVotanteInput>>
    connectOrCreate?: Enumerable<SufragioCreateOrConnectWithoutVotanteInput>
    createMany?: SufragioCreateManyVotanteInputEnvelope
    connect?: Enumerable<SufragioWhereUniqueInput>
  }

  export type RegionUpdateOneRequiredWithoutVotantesNestedInput = {
    create?: XOR<RegionCreateWithoutVotantesInput, RegionUncheckedCreateWithoutVotantesInput>
    connectOrCreate?: RegionCreateOrConnectWithoutVotantesInput
    upsert?: RegionUpsertWithoutVotantesInput
    connect?: RegionWhereUniqueInput
    update?: XOR<RegionUpdateWithoutVotantesInput, RegionUncheckedUpdateWithoutVotantesInput>
  }

  export type SufragioUpdateManyWithoutVotanteNestedInput = {
    create?: XOR<Enumerable<SufragioCreateWithoutVotanteInput>, Enumerable<SufragioUncheckedCreateWithoutVotanteInput>>
    connectOrCreate?: Enumerable<SufragioCreateOrConnectWithoutVotanteInput>
    upsert?: Enumerable<SufragioUpsertWithWhereUniqueWithoutVotanteInput>
    createMany?: SufragioCreateManyVotanteInputEnvelope
    set?: Enumerable<SufragioWhereUniqueInput>
    disconnect?: Enumerable<SufragioWhereUniqueInput>
    delete?: Enumerable<SufragioWhereUniqueInput>
    connect?: Enumerable<SufragioWhereUniqueInput>
    update?: Enumerable<SufragioUpdateWithWhereUniqueWithoutVotanteInput>
    updateMany?: Enumerable<SufragioUpdateManyWithWhereWithoutVotanteInput>
    deleteMany?: Enumerable<SufragioScalarWhereInput>
  }

  export type SufragioUncheckedUpdateManyWithoutVotanteNestedInput = {
    create?: XOR<Enumerable<SufragioCreateWithoutVotanteInput>, Enumerable<SufragioUncheckedCreateWithoutVotanteInput>>
    connectOrCreate?: Enumerable<SufragioCreateOrConnectWithoutVotanteInput>
    upsert?: Enumerable<SufragioUpsertWithWhereUniqueWithoutVotanteInput>
    createMany?: SufragioCreateManyVotanteInputEnvelope
    set?: Enumerable<SufragioWhereUniqueInput>
    disconnect?: Enumerable<SufragioWhereUniqueInput>
    delete?: Enumerable<SufragioWhereUniqueInput>
    connect?: Enumerable<SufragioWhereUniqueInput>
    update?: Enumerable<SufragioUpdateWithWhereUniqueWithoutVotanteInput>
    updateMany?: Enumerable<SufragioUpdateManyWithWhereWithoutVotanteInput>
    deleteMany?: Enumerable<SufragioScalarWhereInput>
  }

  export type partidoPoliticoCreateNestedOneWithoutCandidatosInput = {
    create?: XOR<partidoPoliticoCreateWithoutCandidatosInput, partidoPoliticoUncheckedCreateWithoutCandidatosInput>
    connectOrCreate?: partidoPoliticoCreateOrConnectWithoutCandidatosInput
    connect?: partidoPoliticoWhereUniqueInput
  }

  export type RegionCreateNestedOneWithoutCandidatosInput = {
    create?: XOR<RegionCreateWithoutCandidatosInput, RegionUncheckedCreateWithoutCandidatosInput>
    connectOrCreate?: RegionCreateOrConnectWithoutCandidatosInput
    connect?: RegionWhereUniqueInput
  }

  export type SufragioCreateNestedManyWithoutCandidateInput = {
    create?: XOR<Enumerable<SufragioCreateWithoutCandidateInput>, Enumerable<SufragioUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<SufragioCreateOrConnectWithoutCandidateInput>
    createMany?: SufragioCreateManyCandidateInputEnvelope
    connect?: Enumerable<SufragioWhereUniqueInput>
  }

  export type SufragioUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<Enumerable<SufragioCreateWithoutCandidateInput>, Enumerable<SufragioUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<SufragioCreateOrConnectWithoutCandidateInput>
    createMany?: SufragioCreateManyCandidateInputEnvelope
    connect?: Enumerable<SufragioWhereUniqueInput>
  }

  export type partidoPoliticoUpdateOneRequiredWithoutCandidatosNestedInput = {
    create?: XOR<partidoPoliticoCreateWithoutCandidatosInput, partidoPoliticoUncheckedCreateWithoutCandidatosInput>
    connectOrCreate?: partidoPoliticoCreateOrConnectWithoutCandidatosInput
    upsert?: partidoPoliticoUpsertWithoutCandidatosInput
    connect?: partidoPoliticoWhereUniqueInput
    update?: XOR<partidoPoliticoUpdateWithoutCandidatosInput, partidoPoliticoUncheckedUpdateWithoutCandidatosInput>
  }

  export type RegionUpdateOneRequiredWithoutCandidatosNestedInput = {
    create?: XOR<RegionCreateWithoutCandidatosInput, RegionUncheckedCreateWithoutCandidatosInput>
    connectOrCreate?: RegionCreateOrConnectWithoutCandidatosInput
    upsert?: RegionUpsertWithoutCandidatosInput
    connect?: RegionWhereUniqueInput
    update?: XOR<RegionUpdateWithoutCandidatosInput, RegionUncheckedUpdateWithoutCandidatosInput>
  }

  export type SufragioUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<Enumerable<SufragioCreateWithoutCandidateInput>, Enumerable<SufragioUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<SufragioCreateOrConnectWithoutCandidateInput>
    upsert?: Enumerable<SufragioUpsertWithWhereUniqueWithoutCandidateInput>
    createMany?: SufragioCreateManyCandidateInputEnvelope
    set?: Enumerable<SufragioWhereUniqueInput>
    disconnect?: Enumerable<SufragioWhereUniqueInput>
    delete?: Enumerable<SufragioWhereUniqueInput>
    connect?: Enumerable<SufragioWhereUniqueInput>
    update?: Enumerable<SufragioUpdateWithWhereUniqueWithoutCandidateInput>
    updateMany?: Enumerable<SufragioUpdateManyWithWhereWithoutCandidateInput>
    deleteMany?: Enumerable<SufragioScalarWhereInput>
  }

  export type SufragioUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<Enumerable<SufragioCreateWithoutCandidateInput>, Enumerable<SufragioUncheckedCreateWithoutCandidateInput>>
    connectOrCreate?: Enumerable<SufragioCreateOrConnectWithoutCandidateInput>
    upsert?: Enumerable<SufragioUpsertWithWhereUniqueWithoutCandidateInput>
    createMany?: SufragioCreateManyCandidateInputEnvelope
    set?: Enumerable<SufragioWhereUniqueInput>
    disconnect?: Enumerable<SufragioWhereUniqueInput>
    delete?: Enumerable<SufragioWhereUniqueInput>
    connect?: Enumerable<SufragioWhereUniqueInput>
    update?: Enumerable<SufragioUpdateWithWhereUniqueWithoutCandidateInput>
    updateMany?: Enumerable<SufragioUpdateManyWithWhereWithoutCandidateInput>
    deleteMany?: Enumerable<SufragioScalarWhereInput>
  }

  export type VotanteCreateNestedOneWithoutSufragiosInput = {
    create?: XOR<VotanteCreateWithoutSufragiosInput, VotanteUncheckedCreateWithoutSufragiosInput>
    connectOrCreate?: VotanteCreateOrConnectWithoutSufragiosInput
    connect?: VotanteWhereUniqueInput
  }

  export type CandidatoCreateNestedOneWithoutSufragiosInput = {
    create?: XOR<CandidatoCreateWithoutSufragiosInput, CandidatoUncheckedCreateWithoutSufragiosInput>
    connectOrCreate?: CandidatoCreateOrConnectWithoutSufragiosInput
    connect?: CandidatoWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type VotanteUpdateOneRequiredWithoutSufragiosNestedInput = {
    create?: XOR<VotanteCreateWithoutSufragiosInput, VotanteUncheckedCreateWithoutSufragiosInput>
    connectOrCreate?: VotanteCreateOrConnectWithoutSufragiosInput
    upsert?: VotanteUpsertWithoutSufragiosInput
    connect?: VotanteWhereUniqueInput
    update?: XOR<VotanteUpdateWithoutSufragiosInput, VotanteUncheckedUpdateWithoutSufragiosInput>
  }

  export type CandidatoUpdateOneRequiredWithoutSufragiosNestedInput = {
    create?: XOR<CandidatoCreateWithoutSufragiosInput, CandidatoUncheckedCreateWithoutSufragiosInput>
    connectOrCreate?: CandidatoCreateOrConnectWithoutSufragiosInput
    upsert?: CandidatoUpsertWithoutSufragiosInput
    connect?: CandidatoWhereUniqueInput
    update?: XOR<CandidatoUpdateWithoutSufragiosInput, CandidatoUncheckedUpdateWithoutSufragiosInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type CandidatoCreateWithoutPartidoPoliticoInput = {
    nombre: string
    apellido: string
    region: RegionCreateNestedOneWithoutCandidatosInput
    sufragios?: SufragioCreateNestedManyWithoutCandidateInput
  }

  export type CandidatoUncheckedCreateWithoutPartidoPoliticoInput = {
    id?: number
    nombre: string
    apellido: string
    regionId: number
    sufragios?: SufragioUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidatoCreateOrConnectWithoutPartidoPoliticoInput = {
    where: CandidatoWhereUniqueInput
    create: XOR<CandidatoCreateWithoutPartidoPoliticoInput, CandidatoUncheckedCreateWithoutPartidoPoliticoInput>
  }

  export type CandidatoCreateManyPartidoPoliticoInputEnvelope = {
    data: Enumerable<CandidatoCreateManyPartidoPoliticoInput>
    skipDuplicates?: boolean
  }

  export type CandidatoUpsertWithWhereUniqueWithoutPartidoPoliticoInput = {
    where: CandidatoWhereUniqueInput
    update: XOR<CandidatoUpdateWithoutPartidoPoliticoInput, CandidatoUncheckedUpdateWithoutPartidoPoliticoInput>
    create: XOR<CandidatoCreateWithoutPartidoPoliticoInput, CandidatoUncheckedCreateWithoutPartidoPoliticoInput>
  }

  export type CandidatoUpdateWithWhereUniqueWithoutPartidoPoliticoInput = {
    where: CandidatoWhereUniqueInput
    data: XOR<CandidatoUpdateWithoutPartidoPoliticoInput, CandidatoUncheckedUpdateWithoutPartidoPoliticoInput>
  }

  export type CandidatoUpdateManyWithWhereWithoutPartidoPoliticoInput = {
    where: CandidatoScalarWhereInput
    data: XOR<CandidatoUpdateManyMutationInput, CandidatoUncheckedUpdateManyWithoutCandidatosInput>
  }

  export type CandidatoScalarWhereInput = {
    AND?: Enumerable<CandidatoScalarWhereInput>
    OR?: Enumerable<CandidatoScalarWhereInput>
    NOT?: Enumerable<CandidatoScalarWhereInput>
    id?: IntFilter | number
    nombre?: StringFilter | string
    apellido?: StringFilter | string
    partidoPoliticoId?: IntFilter | number
    regionId?: IntFilter | number
  }

  export type CandidatoCreateWithoutRegionInput = {
    nombre: string
    apellido: string
    partidoPolitico: partidoPoliticoCreateNestedOneWithoutCandidatosInput
    sufragios?: SufragioCreateNestedManyWithoutCandidateInput
  }

  export type CandidatoUncheckedCreateWithoutRegionInput = {
    id?: number
    nombre: string
    apellido: string
    partidoPoliticoId: number
    sufragios?: SufragioUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidatoCreateOrConnectWithoutRegionInput = {
    where: CandidatoWhereUniqueInput
    create: XOR<CandidatoCreateWithoutRegionInput, CandidatoUncheckedCreateWithoutRegionInput>
  }

  export type CandidatoCreateManyRegionInputEnvelope = {
    data: Enumerable<CandidatoCreateManyRegionInput>
    skipDuplicates?: boolean
  }

  export type VotanteCreateWithoutRegionInput = {
    dni: string
    nombre: string
    apellido: string
    sufragios?: SufragioCreateNestedManyWithoutVotanteInput
  }

  export type VotanteUncheckedCreateWithoutRegionInput = {
    dni: string
    nombre: string
    apellido: string
    sufragios?: SufragioUncheckedCreateNestedManyWithoutVotanteInput
  }

  export type VotanteCreateOrConnectWithoutRegionInput = {
    where: VotanteWhereUniqueInput
    create: XOR<VotanteCreateWithoutRegionInput, VotanteUncheckedCreateWithoutRegionInput>
  }

  export type VotanteCreateManyRegionInputEnvelope = {
    data: Enumerable<VotanteCreateManyRegionInput>
    skipDuplicates?: boolean
  }

  export type CandidatoUpsertWithWhereUniqueWithoutRegionInput = {
    where: CandidatoWhereUniqueInput
    update: XOR<CandidatoUpdateWithoutRegionInput, CandidatoUncheckedUpdateWithoutRegionInput>
    create: XOR<CandidatoCreateWithoutRegionInput, CandidatoUncheckedCreateWithoutRegionInput>
  }

  export type CandidatoUpdateWithWhereUniqueWithoutRegionInput = {
    where: CandidatoWhereUniqueInput
    data: XOR<CandidatoUpdateWithoutRegionInput, CandidatoUncheckedUpdateWithoutRegionInput>
  }

  export type CandidatoUpdateManyWithWhereWithoutRegionInput = {
    where: CandidatoScalarWhereInput
    data: XOR<CandidatoUpdateManyMutationInput, CandidatoUncheckedUpdateManyWithoutCandidatosInput>
  }

  export type VotanteUpsertWithWhereUniqueWithoutRegionInput = {
    where: VotanteWhereUniqueInput
    update: XOR<VotanteUpdateWithoutRegionInput, VotanteUncheckedUpdateWithoutRegionInput>
    create: XOR<VotanteCreateWithoutRegionInput, VotanteUncheckedCreateWithoutRegionInput>
  }

  export type VotanteUpdateWithWhereUniqueWithoutRegionInput = {
    where: VotanteWhereUniqueInput
    data: XOR<VotanteUpdateWithoutRegionInput, VotanteUncheckedUpdateWithoutRegionInput>
  }

  export type VotanteUpdateManyWithWhereWithoutRegionInput = {
    where: VotanteScalarWhereInput
    data: XOR<VotanteUpdateManyMutationInput, VotanteUncheckedUpdateManyWithoutVotantesInput>
  }

  export type VotanteScalarWhereInput = {
    AND?: Enumerable<VotanteScalarWhereInput>
    OR?: Enumerable<VotanteScalarWhereInput>
    NOT?: Enumerable<VotanteScalarWhereInput>
    dni?: StringFilter | string
    nombre?: StringFilter | string
    apellido?: StringFilter | string
    regionId?: IntFilter | number
  }

  export type RegionCreateWithoutVotantesInput = {
    nombre: string
    candidatos?: CandidatoCreateNestedManyWithoutRegionInput
  }

  export type RegionUncheckedCreateWithoutVotantesInput = {
    id?: number
    nombre: string
    candidatos?: CandidatoUncheckedCreateNestedManyWithoutRegionInput
  }

  export type RegionCreateOrConnectWithoutVotantesInput = {
    where: RegionWhereUniqueInput
    create: XOR<RegionCreateWithoutVotantesInput, RegionUncheckedCreateWithoutVotantesInput>
  }

  export type SufragioCreateWithoutVotanteInput = {
    fecha?: Date | string
    candidate: CandidatoCreateNestedOneWithoutSufragiosInput
  }

  export type SufragioUncheckedCreateWithoutVotanteInput = {
    id?: number
    fecha?: Date | string
    candidatoId: number
  }

  export type SufragioCreateOrConnectWithoutVotanteInput = {
    where: SufragioWhereUniqueInput
    create: XOR<SufragioCreateWithoutVotanteInput, SufragioUncheckedCreateWithoutVotanteInput>
  }

  export type SufragioCreateManyVotanteInputEnvelope = {
    data: Enumerable<SufragioCreateManyVotanteInput>
    skipDuplicates?: boolean
  }

  export type RegionUpsertWithoutVotantesInput = {
    update: XOR<RegionUpdateWithoutVotantesInput, RegionUncheckedUpdateWithoutVotantesInput>
    create: XOR<RegionCreateWithoutVotantesInput, RegionUncheckedCreateWithoutVotantesInput>
  }

  export type RegionUpdateWithoutVotantesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    candidatos?: CandidatoUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateWithoutVotantesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    candidatos?: CandidatoUncheckedUpdateManyWithoutRegionNestedInput
  }

  export type SufragioUpsertWithWhereUniqueWithoutVotanteInput = {
    where: SufragioWhereUniqueInput
    update: XOR<SufragioUpdateWithoutVotanteInput, SufragioUncheckedUpdateWithoutVotanteInput>
    create: XOR<SufragioCreateWithoutVotanteInput, SufragioUncheckedCreateWithoutVotanteInput>
  }

  export type SufragioUpdateWithWhereUniqueWithoutVotanteInput = {
    where: SufragioWhereUniqueInput
    data: XOR<SufragioUpdateWithoutVotanteInput, SufragioUncheckedUpdateWithoutVotanteInput>
  }

  export type SufragioUpdateManyWithWhereWithoutVotanteInput = {
    where: SufragioScalarWhereInput
    data: XOR<SufragioUpdateManyMutationInput, SufragioUncheckedUpdateManyWithoutSufragiosInput>
  }

  export type SufragioScalarWhereInput = {
    AND?: Enumerable<SufragioScalarWhereInput>
    OR?: Enumerable<SufragioScalarWhereInput>
    NOT?: Enumerable<SufragioScalarWhereInput>
    id?: IntFilter | number
    fecha?: DateTimeFilter | Date | string
    votanteId?: StringFilter | string
    candidatoId?: IntFilter | number
  }

  export type partidoPoliticoCreateWithoutCandidatosInput = {
    nombre: string
    logo: string
  }

  export type partidoPoliticoUncheckedCreateWithoutCandidatosInput = {
    id?: number
    nombre: string
    logo: string
  }

  export type partidoPoliticoCreateOrConnectWithoutCandidatosInput = {
    where: partidoPoliticoWhereUniqueInput
    create: XOR<partidoPoliticoCreateWithoutCandidatosInput, partidoPoliticoUncheckedCreateWithoutCandidatosInput>
  }

  export type RegionCreateWithoutCandidatosInput = {
    nombre: string
    votantes?: VotanteCreateNestedManyWithoutRegionInput
  }

  export type RegionUncheckedCreateWithoutCandidatosInput = {
    id?: number
    nombre: string
    votantes?: VotanteUncheckedCreateNestedManyWithoutRegionInput
  }

  export type RegionCreateOrConnectWithoutCandidatosInput = {
    where: RegionWhereUniqueInput
    create: XOR<RegionCreateWithoutCandidatosInput, RegionUncheckedCreateWithoutCandidatosInput>
  }

  export type SufragioCreateWithoutCandidateInput = {
    fecha?: Date | string
    votante: VotanteCreateNestedOneWithoutSufragiosInput
  }

  export type SufragioUncheckedCreateWithoutCandidateInput = {
    id?: number
    fecha?: Date | string
    votanteId: string
  }

  export type SufragioCreateOrConnectWithoutCandidateInput = {
    where: SufragioWhereUniqueInput
    create: XOR<SufragioCreateWithoutCandidateInput, SufragioUncheckedCreateWithoutCandidateInput>
  }

  export type SufragioCreateManyCandidateInputEnvelope = {
    data: Enumerable<SufragioCreateManyCandidateInput>
    skipDuplicates?: boolean
  }

  export type partidoPoliticoUpsertWithoutCandidatosInput = {
    update: XOR<partidoPoliticoUpdateWithoutCandidatosInput, partidoPoliticoUncheckedUpdateWithoutCandidatosInput>
    create: XOR<partidoPoliticoCreateWithoutCandidatosInput, partidoPoliticoUncheckedCreateWithoutCandidatosInput>
  }

  export type partidoPoliticoUpdateWithoutCandidatosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
  }

  export type partidoPoliticoUncheckedUpdateWithoutCandidatosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
  }

  export type RegionUpsertWithoutCandidatosInput = {
    update: XOR<RegionUpdateWithoutCandidatosInput, RegionUncheckedUpdateWithoutCandidatosInput>
    create: XOR<RegionCreateWithoutCandidatosInput, RegionUncheckedCreateWithoutCandidatosInput>
  }

  export type RegionUpdateWithoutCandidatosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    votantes?: VotanteUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateWithoutCandidatosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    votantes?: VotanteUncheckedUpdateManyWithoutRegionNestedInput
  }

  export type SufragioUpsertWithWhereUniqueWithoutCandidateInput = {
    where: SufragioWhereUniqueInput
    update: XOR<SufragioUpdateWithoutCandidateInput, SufragioUncheckedUpdateWithoutCandidateInput>
    create: XOR<SufragioCreateWithoutCandidateInput, SufragioUncheckedCreateWithoutCandidateInput>
  }

  export type SufragioUpdateWithWhereUniqueWithoutCandidateInput = {
    where: SufragioWhereUniqueInput
    data: XOR<SufragioUpdateWithoutCandidateInput, SufragioUncheckedUpdateWithoutCandidateInput>
  }

  export type SufragioUpdateManyWithWhereWithoutCandidateInput = {
    where: SufragioScalarWhereInput
    data: XOR<SufragioUpdateManyMutationInput, SufragioUncheckedUpdateManyWithoutSufragiosInput>
  }

  export type VotanteCreateWithoutSufragiosInput = {
    dni: string
    nombre: string
    apellido: string
    region: RegionCreateNestedOneWithoutVotantesInput
  }

  export type VotanteUncheckedCreateWithoutSufragiosInput = {
    dni: string
    nombre: string
    apellido: string
    regionId: number
  }

  export type VotanteCreateOrConnectWithoutSufragiosInput = {
    where: VotanteWhereUniqueInput
    create: XOR<VotanteCreateWithoutSufragiosInput, VotanteUncheckedCreateWithoutSufragiosInput>
  }

  export type CandidatoCreateWithoutSufragiosInput = {
    nombre: string
    apellido: string
    partidoPolitico: partidoPoliticoCreateNestedOneWithoutCandidatosInput
    region: RegionCreateNestedOneWithoutCandidatosInput
  }

  export type CandidatoUncheckedCreateWithoutSufragiosInput = {
    id?: number
    nombre: string
    apellido: string
    partidoPoliticoId: number
    regionId: number
  }

  export type CandidatoCreateOrConnectWithoutSufragiosInput = {
    where: CandidatoWhereUniqueInput
    create: XOR<CandidatoCreateWithoutSufragiosInput, CandidatoUncheckedCreateWithoutSufragiosInput>
  }

  export type VotanteUpsertWithoutSufragiosInput = {
    update: XOR<VotanteUpdateWithoutSufragiosInput, VotanteUncheckedUpdateWithoutSufragiosInput>
    create: XOR<VotanteCreateWithoutSufragiosInput, VotanteUncheckedCreateWithoutSufragiosInput>
  }

  export type VotanteUpdateWithoutSufragiosInput = {
    dni?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    region?: RegionUpdateOneRequiredWithoutVotantesNestedInput
  }

  export type VotanteUncheckedUpdateWithoutSufragiosInput = {
    dni?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    regionId?: IntFieldUpdateOperationsInput | number
  }

  export type CandidatoUpsertWithoutSufragiosInput = {
    update: XOR<CandidatoUpdateWithoutSufragiosInput, CandidatoUncheckedUpdateWithoutSufragiosInput>
    create: XOR<CandidatoCreateWithoutSufragiosInput, CandidatoUncheckedCreateWithoutSufragiosInput>
  }

  export type CandidatoUpdateWithoutSufragiosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    partidoPolitico?: partidoPoliticoUpdateOneRequiredWithoutCandidatosNestedInput
    region?: RegionUpdateOneRequiredWithoutCandidatosNestedInput
  }

  export type CandidatoUncheckedUpdateWithoutSufragiosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    partidoPoliticoId?: IntFieldUpdateOperationsInput | number
    regionId?: IntFieldUpdateOperationsInput | number
  }

  export type CandidatoCreateManyPartidoPoliticoInput = {
    id?: number
    nombre: string
    apellido: string
    regionId: number
  }

  export type CandidatoUpdateWithoutPartidoPoliticoInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    region?: RegionUpdateOneRequiredWithoutCandidatosNestedInput
    sufragios?: SufragioUpdateManyWithoutCandidateNestedInput
  }

  export type CandidatoUncheckedUpdateWithoutPartidoPoliticoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    regionId?: IntFieldUpdateOperationsInput | number
    sufragios?: SufragioUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type CandidatoUncheckedUpdateManyWithoutCandidatosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    regionId?: IntFieldUpdateOperationsInput | number
  }

  export type CandidatoCreateManyRegionInput = {
    id?: number
    nombre: string
    apellido: string
    partidoPoliticoId: number
  }

  export type VotanteCreateManyRegionInput = {
    dni: string
    nombre: string
    apellido: string
  }

  export type CandidatoUpdateWithoutRegionInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    partidoPolitico?: partidoPoliticoUpdateOneRequiredWithoutCandidatosNestedInput
    sufragios?: SufragioUpdateManyWithoutCandidateNestedInput
  }

  export type CandidatoUncheckedUpdateWithoutRegionInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    partidoPoliticoId?: IntFieldUpdateOperationsInput | number
    sufragios?: SufragioUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type VotanteUpdateWithoutRegionInput = {
    dni?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    sufragios?: SufragioUpdateManyWithoutVotanteNestedInput
  }

  export type VotanteUncheckedUpdateWithoutRegionInput = {
    dni?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    sufragios?: SufragioUncheckedUpdateManyWithoutVotanteNestedInput
  }

  export type VotanteUncheckedUpdateManyWithoutVotantesInput = {
    dni?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
  }

  export type SufragioCreateManyVotanteInput = {
    id?: number
    fecha?: Date | string
    candidatoId: number
  }

  export type SufragioUpdateWithoutVotanteInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    candidate?: CandidatoUpdateOneRequiredWithoutSufragiosNestedInput
  }

  export type SufragioUncheckedUpdateWithoutVotanteInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    candidatoId?: IntFieldUpdateOperationsInput | number
  }

  export type SufragioUncheckedUpdateManyWithoutSufragiosInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    candidatoId?: IntFieldUpdateOperationsInput | number
  }

  export type SufragioCreateManyCandidateInput = {
    id?: number
    fecha?: Date | string
    votanteId: string
  }

  export type SufragioUpdateWithoutCandidateInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    votante?: VotanteUpdateOneRequiredWithoutSufragiosNestedInput
  }

  export type SufragioUncheckedUpdateWithoutCandidateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    votanteId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}